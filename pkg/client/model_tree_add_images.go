/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TreeAddImages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeAddImages{}

// TreeAddImages struct for TreeAddImages
type TreeAddImages struct {
	ImageIds []int32 `json:"image_ids"`
}

type _TreeAddImages TreeAddImages

// NewTreeAddImages instantiates a new TreeAddImages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeAddImages(imageIds []int32) *TreeAddImages {
	this := TreeAddImages{}
	this.ImageIds = imageIds
	return &this
}

// NewTreeAddImagesWithDefaults instantiates a new TreeAddImages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeAddImagesWithDefaults() *TreeAddImages {
	this := TreeAddImages{}
	return &this
}

// GetImageIds returns the ImageIds field value
func (o *TreeAddImages) GetImageIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ImageIds
}

// GetImageIdsOk returns a tuple with the ImageIds field value
// and a boolean to check if the value has been set.
func (o *TreeAddImages) GetImageIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageIds, true
}

// SetImageIds sets field value
func (o *TreeAddImages) SetImageIds(v []int32) {
	o.ImageIds = v
}

func (o TreeAddImages) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeAddImages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image_ids"] = o.ImageIds
	return toSerialize, nil
}

func (o *TreeAddImages) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTreeAddImages := _TreeAddImages{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTreeAddImages)

	if err != nil {
		return err
	}

	*o = TreeAddImages(varTreeAddImages)

	return err
}

type NullableTreeAddImages struct {
	value *TreeAddImages
	isSet bool
}

func (v NullableTreeAddImages) Get() *TreeAddImages {
	return v.value
}

func (v *NullableTreeAddImages) Set(val *TreeAddImages) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeAddImages) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeAddImages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeAddImages(val *TreeAddImages) *NullableTreeAddImages {
	return &NullableTreeAddImages{value: val, isSet: true}
}

func (v NullableTreeAddImages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeAddImages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
