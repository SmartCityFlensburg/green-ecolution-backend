/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUpdate{}

// UserUpdate struct for UserUpdate
type UserUpdate struct {
	AvatarUrl string `json:"avatar_url"`
	Email string `json:"email"`
	EmployeeId string `json:"employee_id"`
	FirstName string `json:"first_name"`
	LastName string `json:"last_name"`
	PhoneNumber string `json:"phone_number"`
	Username string `json:"username"`
}

type _UserUpdate UserUpdate

// NewUserUpdate instantiates a new UserUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdate(avatarUrl string, email string, employeeId string, firstName string, lastName string, phoneNumber string, username string) *UserUpdate {
	this := UserUpdate{}
	this.AvatarUrl = avatarUrl
	this.Email = email
	this.EmployeeId = employeeId
	this.FirstName = firstName
	this.LastName = lastName
	this.PhoneNumber = phoneNumber
	this.Username = username
	return &this
}

// NewUserUpdateWithDefaults instantiates a new UserUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateWithDefaults() *UserUpdate {
	this := UserUpdate{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *UserUpdate) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *UserUpdate) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetEmail returns the Email field value
func (o *UserUpdate) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserUpdate) SetEmail(v string) {
	o.Email = v
}

// GetEmployeeId returns the EmployeeId field value
func (o *UserUpdate) GetEmployeeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmployeeId
}

// GetEmployeeIdOk returns a tuple with the EmployeeId field value
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetEmployeeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmployeeId, true
}

// SetEmployeeId sets field value
func (o *UserUpdate) SetEmployeeId(v string) {
	o.EmployeeId = v
}

// GetFirstName returns the FirstName field value
func (o *UserUpdate) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *UserUpdate) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *UserUpdate) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *UserUpdate) SetLastName(v string) {
	o.LastName = v
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *UserUpdate) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *UserUpdate) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetUsername returns the Username field value
func (o *UserUpdate) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserUpdate) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserUpdate) SetUsername(v string) {
	o.Username = v
}

func (o UserUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["email"] = o.Email
	toSerialize["employee_id"] = o.EmployeeId
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["phone_number"] = o.PhoneNumber
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *UserUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"avatar_url",
		"email",
		"employee_id",
		"first_name",
		"last_name",
		"phone_number",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserUpdate := _UserUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserUpdate)

	if err != nil {
		return err
	}

	*o = UserUpdate(varUserUpdate)

	return err
}

type NullableUserUpdate struct {
	value *UserUpdate
	isSet bool
}

func (v NullableUserUpdate) Get() *UserUpdate {
	return v.value
}

func (v *NullableUserUpdate) Set(val *UserUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdate(val *UserUpdate) *NullableUserUpdate {
	return &NullableUserUpdate{value: val, isSet: true}
}

func (v NullableUserUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


