/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SensorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorData{}

// SensorData struct for SensorData
type SensorData struct {
	BatteryLevel float32 `json:"battery_level"`
	Depth float32 `json:"depth"`
	Humidity float32 `json:"humidity"`
	Id string `json:"id"`
	SoilWaterTension float32 `json:"soil_water_tension"`
	Temperature float32 `json:"temperature"`
	TrunkMoisture float32 `json:"trunk_moisture"`
}

type _SensorData SensorData

// NewSensorData instantiates a new SensorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorData(batteryLevel float32, depth float32, humidity float32, id string, soilWaterTension float32, temperature float32, trunkMoisture float32) *SensorData {
	this := SensorData{}
	this.BatteryLevel = batteryLevel
	this.Depth = depth
	this.Humidity = humidity
	this.Id = id
	this.SoilWaterTension = soilWaterTension
	this.Temperature = temperature
	this.TrunkMoisture = trunkMoisture
	return &this
}

// NewSensorDataWithDefaults instantiates a new SensorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorDataWithDefaults() *SensorData {
	this := SensorData{}
	return &this
}

// GetBatteryLevel returns the BatteryLevel field value
func (o *SensorData) GetBatteryLevel() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BatteryLevel
}

// GetBatteryLevelOk returns a tuple with the BatteryLevel field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetBatteryLevelOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatteryLevel, true
}

// SetBatteryLevel sets field value
func (o *SensorData) SetBatteryLevel(v float32) {
	o.BatteryLevel = v
}

// GetDepth returns the Depth field value
func (o *SensorData) GetDepth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Depth
}

// GetDepthOk returns a tuple with the Depth field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetDepthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Depth, true
}

// SetDepth sets field value
func (o *SensorData) SetDepth(v float32) {
	o.Depth = v
}

// GetHumidity returns the Humidity field value
func (o *SensorData) GetHumidity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Humidity
}

// GetHumidityOk returns a tuple with the Humidity field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetHumidityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Humidity, true
}

// SetHumidity sets field value
func (o *SensorData) SetHumidity(v float32) {
	o.Humidity = v
}

// GetId returns the Id field value
func (o *SensorData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SensorData) SetId(v string) {
	o.Id = v
}

// GetSoilWaterTension returns the SoilWaterTension field value
func (o *SensorData) GetSoilWaterTension() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SoilWaterTension
}

// GetSoilWaterTensionOk returns a tuple with the SoilWaterTension field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetSoilWaterTensionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoilWaterTension, true
}

// SetSoilWaterTension sets field value
func (o *SensorData) SetSoilWaterTension(v float32) {
	o.SoilWaterTension = v
}

// GetTemperature returns the Temperature field value
func (o *SensorData) GetTemperature() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Temperature, true
}

// SetTemperature sets field value
func (o *SensorData) SetTemperature(v float32) {
	o.Temperature = v
}

// GetTrunkMoisture returns the TrunkMoisture field value
func (o *SensorData) GetTrunkMoisture() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TrunkMoisture
}

// GetTrunkMoistureOk returns a tuple with the TrunkMoisture field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetTrunkMoistureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrunkMoisture, true
}

// SetTrunkMoisture sets field value
func (o *SensorData) SetTrunkMoisture(v float32) {
	o.TrunkMoisture = v
}

func (o SensorData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["battery_level"] = o.BatteryLevel
	toSerialize["depth"] = o.Depth
	toSerialize["humidity"] = o.Humidity
	toSerialize["id"] = o.Id
	toSerialize["soil_water_tension"] = o.SoilWaterTension
	toSerialize["temperature"] = o.Temperature
	toSerialize["trunk_moisture"] = o.TrunkMoisture
	return toSerialize, nil
}

func (o *SensorData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"battery_level",
		"depth",
		"humidity",
		"id",
		"soil_water_tension",
		"temperature",
		"trunk_moisture",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorData := _SensorData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSensorData)

	if err != nil {
		return err
	}

	*o = SensorData(varSensorData)

	return err
}

type NullableSensorData struct {
	value *SensorData
	isSet bool
}

func (v NullableSensorData) Get() *SensorData {
	return v.value
}

func (v *NullableSensorData) Set(val *SensorData) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorData) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorData(val *SensorData) *NullableSensorData {
	return &NullableSensorData{value: val, isSet: true}
}

func (v NullableSensorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


