/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TreeClusterCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeClusterCreate{}

// TreeClusterCreate struct for TreeClusterCreate
type TreeClusterCreate struct {
	Address string `json:"address"`
	Description string `json:"description"`
	Name string `json:"name"`
	SoilCondition SoilCondition `json:"soil_condition"`
	TreeIds []int32 `json:"tree_ids"`
}

type _TreeClusterCreate TreeClusterCreate

// NewTreeClusterCreate instantiates a new TreeClusterCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeClusterCreate(address string, description string, name string, soilCondition SoilCondition, treeIds []int32) *TreeClusterCreate {
	this := TreeClusterCreate{}
	this.Address = address
	this.Description = description
	this.Name = name
	this.SoilCondition = soilCondition
	this.TreeIds = treeIds
	return &this
}

// NewTreeClusterCreateWithDefaults instantiates a new TreeClusterCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeClusterCreateWithDefaults() *TreeClusterCreate {
	this := TreeClusterCreate{}
	return &this
}

// GetAddress returns the Address field value
func (o *TreeClusterCreate) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TreeClusterCreate) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TreeClusterCreate) SetAddress(v string) {
	o.Address = v
}

// GetDescription returns the Description field value
func (o *TreeClusterCreate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TreeClusterCreate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TreeClusterCreate) SetDescription(v string) {
	o.Description = v
}

// GetName returns the Name field value
func (o *TreeClusterCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TreeClusterCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TreeClusterCreate) SetName(v string) {
	o.Name = v
}

// GetSoilCondition returns the SoilCondition field value
func (o *TreeClusterCreate) GetSoilCondition() SoilCondition {
	if o == nil {
		var ret SoilCondition
		return ret
	}

	return o.SoilCondition
}

// GetSoilConditionOk returns a tuple with the SoilCondition field value
// and a boolean to check if the value has been set.
func (o *TreeClusterCreate) GetSoilConditionOk() (*SoilCondition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoilCondition, true
}

// SetSoilCondition sets field value
func (o *TreeClusterCreate) SetSoilCondition(v SoilCondition) {
	o.SoilCondition = v
}

// GetTreeIds returns the TreeIds field value
func (o *TreeClusterCreate) GetTreeIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.TreeIds
}

// GetTreeIdsOk returns a tuple with the TreeIds field value
// and a boolean to check if the value has been set.
func (o *TreeClusterCreate) GetTreeIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TreeIds, true
}

// SetTreeIds sets field value
func (o *TreeClusterCreate) SetTreeIds(v []int32) {
	o.TreeIds = v
}

func (o TreeClusterCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeClusterCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["description"] = o.Description
	toSerialize["name"] = o.Name
	toSerialize["soil_condition"] = o.SoilCondition
	toSerialize["tree_ids"] = o.TreeIds
	return toSerialize, nil
}

func (o *TreeClusterCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"description",
		"name",
		"soil_condition",
		"tree_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTreeClusterCreate := _TreeClusterCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTreeClusterCreate)

	if err != nil {
		return err
	}

	*o = TreeClusterCreate(varTreeClusterCreate)

	return err
}

type NullableTreeClusterCreate struct {
	value *TreeClusterCreate
	isSet bool
}

func (v NullableTreeClusterCreate) Get() *TreeClusterCreate {
	return v.value
}

func (v *NullableTreeClusterCreate) Set(val *TreeClusterCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeClusterCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeClusterCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeClusterCreate(val *TreeClusterCreate) *NullableTreeClusterCreate {
	return &NullableTreeClusterCreate{value: val, isSet: true}
}

func (v NullableTreeClusterCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeClusterCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


