/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TreeAddSensor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeAddSensor{}

// TreeAddSensor struct for TreeAddSensor
type TreeAddSensor struct {
	SensorId string `json:"sensor_id"`
}

type _TreeAddSensor TreeAddSensor

// NewTreeAddSensor instantiates a new TreeAddSensor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeAddSensor(sensorId string) *TreeAddSensor {
	this := TreeAddSensor{}
	this.SensorId = sensorId
	return &this
}

// NewTreeAddSensorWithDefaults instantiates a new TreeAddSensor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeAddSensorWithDefaults() *TreeAddSensor {
	this := TreeAddSensor{}
	return &this
}

// GetSensorId returns the SensorId field value
func (o *TreeAddSensor) GetSensorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value
// and a boolean to check if the value has been set.
func (o *TreeAddSensor) GetSensorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorId, true
}

// SetSensorId sets field value
func (o *TreeAddSensor) SetSensorId(v string) {
	o.SensorId = v
}

func (o TreeAddSensor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeAddSensor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sensor_id"] = o.SensorId
	return toSerialize, nil
}

func (o *TreeAddSensor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sensor_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTreeAddSensor := _TreeAddSensor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTreeAddSensor)

	if err != nil {
		return err
	}

	*o = TreeAddSensor(varTreeAddSensor)

	return err
}

type NullableTreeAddSensor struct {
	value *TreeAddSensor
	isSet bool
}

func (v NullableTreeAddSensor) Get() *TreeAddSensor {
	return v.value
}

func (v *NullableTreeAddSensor) Set(val *TreeAddSensor) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeAddSensor) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeAddSensor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeAddSensor(val *TreeAddSensor) *NullableTreeAddSensor {
	return &NullableTreeAddSensor{value: val, isSet: true}
}

func (v NullableTreeAddSensor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeAddSensor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


