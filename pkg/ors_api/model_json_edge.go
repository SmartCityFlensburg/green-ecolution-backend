/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JsonEdge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonEdge{}

// JsonEdge struct for JsonEdge
type JsonEdge struct {
	// Id of the start point of the edge
	FromId *int32 `json:"fromId,omitempty"`
	// Id of the end point of the edge
	ToId *int32 `json:"toId,omitempty"`
	// Weight of the corresponding edge in the given bounding box
	Weight *float64 `json:"weight,omitempty"`
}

// NewJsonEdge instantiates a new JsonEdge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonEdge() *JsonEdge {
	this := JsonEdge{}
	return &this
}

// NewJsonEdgeWithDefaults instantiates a new JsonEdge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonEdgeWithDefaults() *JsonEdge {
	this := JsonEdge{}
	return &this
}

// GetFromId returns the FromId field value if set, zero value otherwise.
func (o *JsonEdge) GetFromId() int32 {
	if o == nil || IsNil(o.FromId) {
		var ret int32
		return ret
	}
	return *o.FromId
}

// GetFromIdOk returns a tuple with the FromId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonEdge) GetFromIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FromId) {
		return nil, false
	}
	return o.FromId, true
}

// HasFromId returns a boolean if a field has been set.
func (o *JsonEdge) HasFromId() bool {
	if o != nil && !IsNil(o.FromId) {
		return true
	}

	return false
}

// SetFromId gets a reference to the given int32 and assigns it to the FromId field.
func (o *JsonEdge) SetFromId(v int32) {
	o.FromId = &v
}

// GetToId returns the ToId field value if set, zero value otherwise.
func (o *JsonEdge) GetToId() int32 {
	if o == nil || IsNil(o.ToId) {
		var ret int32
		return ret
	}
	return *o.ToId
}

// GetToIdOk returns a tuple with the ToId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonEdge) GetToIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ToId) {
		return nil, false
	}
	return o.ToId, true
}

// HasToId returns a boolean if a field has been set.
func (o *JsonEdge) HasToId() bool {
	if o != nil && !IsNil(o.ToId) {
		return true
	}

	return false
}

// SetToId gets a reference to the given int32 and assigns it to the ToId field.
func (o *JsonEdge) SetToId(v int32) {
	o.ToId = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *JsonEdge) GetWeight() float64 {
	if o == nil || IsNil(o.Weight) {
		var ret float64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonEdge) GetWeightOk() (*float64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *JsonEdge) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float64 and assigns it to the Weight field.
func (o *JsonEdge) SetWeight(v float64) {
	o.Weight = &v
}

func (o JsonEdge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonEdge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromId) {
		toSerialize["fromId"] = o.FromId
	}
	if !IsNil(o.ToId) {
		toSerialize["toId"] = o.ToId
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

type NullableJsonEdge struct {
	value *JsonEdge
	isSet bool
}

func (v NullableJsonEdge) Get() *JsonEdge {
	return v.value
}

func (v *NullableJsonEdge) Set(val *JsonEdge) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonEdge) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonEdge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonEdge(val *JsonEdge) *NullableJsonEdge {
	return &NullableJsonEdge{value: val, isSet: true}
}

func (v NullableJsonEdge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonEdge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


