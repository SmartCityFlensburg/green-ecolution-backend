/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IsochronesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IsochronesRequest{}

// IsochronesRequest The JSON body request sent to the isochrones service which defines options and parameters regarding the isochrones to generate.
type IsochronesRequest struct {
	ProfileName *string `json:"profileName,omitempty"`
	// Arbitrary identification string of the request reflected in the meta information.
	Id *string `json:"id,omitempty"`
	// The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)
	Locations [][]float64 `json:"locations"`
	// `start` treats the location(s) as starting point, `destination` as goal.
	LocationType *string `json:"location_type,omitempty"`
	// Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.
	Range []float64 `json:"range"`
	// Specifies the isochrones reachability type.
	RangeType *string `json:"range_type,omitempty"`
	// Specifies the distance units only if `range_type` is set to distance. Default: m. 
	Units *string `json:"units,omitempty"`
	Options *RouteOptions `json:"options,omitempty"`
	// Specifies the area unit. Default: m. 
	AreaUnits *string `json:"area_units,omitempty"`
	// Specifies whether to return intersecting polygons. 
	Intersections *bool `json:"intersections,omitempty"`
	// List of isochrones attributes
	Attributes []string `json:"attributes,omitempty"`
	// Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.
	Interval *float64 `json:"interval,omitempty"`
	// Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`. Generalisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon. If the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used. Note that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used. The threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`. Therefore, a value closer to 100 will result in a more generalised shape. The polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`
	Smoothing *float64 `json:"smoothing,omitempty"`
}

type _IsochronesRequest IsochronesRequest

// NewIsochronesRequest instantiates a new IsochronesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsochronesRequest(locations [][]float64, range_ []float64) *IsochronesRequest {
	this := IsochronesRequest{}
	this.Locations = locations
	var locationType string = "start"
	this.LocationType = &locationType
	this.Range = range_
	var rangeType string = "time"
	this.RangeType = &rangeType
	var units string = "m"
	this.Units = &units
	var areaUnits string = "m"
	this.AreaUnits = &areaUnits
	var intersections bool = false
	this.Intersections = &intersections
	return &this
}

// NewIsochronesRequestWithDefaults instantiates a new IsochronesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsochronesRequestWithDefaults() *IsochronesRequest {
	this := IsochronesRequest{}
	var locationType string = "start"
	this.LocationType = &locationType
	var rangeType string = "time"
	this.RangeType = &rangeType
	var units string = "m"
	this.Units = &units
	var areaUnits string = "m"
	this.AreaUnits = &areaUnits
	var intersections bool = false
	this.Intersections = &intersections
	return &this
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *IsochronesRequest) GetProfileName() string {
	if o == nil || IsNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *IsochronesRequest) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *IsochronesRequest) SetProfileName(v string) {
	o.ProfileName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IsochronesRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IsochronesRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IsochronesRequest) SetId(v string) {
	o.Id = &v
}

// GetLocations returns the Locations field value
func (o *IsochronesRequest) GetLocations() [][]float64 {
	if o == nil {
		var ret [][]float64
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetLocationsOk() ([][]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *IsochronesRequest) SetLocations(v [][]float64) {
	o.Locations = v
}

// GetLocationType returns the LocationType field value if set, zero value otherwise.
func (o *IsochronesRequest) GetLocationType() string {
	if o == nil || IsNil(o.LocationType) {
		var ret string
		return ret
	}
	return *o.LocationType
}

// GetLocationTypeOk returns a tuple with the LocationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetLocationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LocationType) {
		return nil, false
	}
	return o.LocationType, true
}

// HasLocationType returns a boolean if a field has been set.
func (o *IsochronesRequest) HasLocationType() bool {
	if o != nil && !IsNil(o.LocationType) {
		return true
	}

	return false
}

// SetLocationType gets a reference to the given string and assigns it to the LocationType field.
func (o *IsochronesRequest) SetLocationType(v string) {
	o.LocationType = &v
}

// GetRange returns the Range field value
func (o *IsochronesRequest) GetRange() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetRangeOk() ([]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Range, true
}

// SetRange sets field value
func (o *IsochronesRequest) SetRange(v []float64) {
	o.Range = v
}

// GetRangeType returns the RangeType field value if set, zero value otherwise.
func (o *IsochronesRequest) GetRangeType() string {
	if o == nil || IsNil(o.RangeType) {
		var ret string
		return ret
	}
	return *o.RangeType
}

// GetRangeTypeOk returns a tuple with the RangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetRangeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RangeType) {
		return nil, false
	}
	return o.RangeType, true
}

// HasRangeType returns a boolean if a field has been set.
func (o *IsochronesRequest) HasRangeType() bool {
	if o != nil && !IsNil(o.RangeType) {
		return true
	}

	return false
}

// SetRangeType gets a reference to the given string and assigns it to the RangeType field.
func (o *IsochronesRequest) SetRangeType(v string) {
	o.RangeType = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *IsochronesRequest) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *IsochronesRequest) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *IsochronesRequest) SetUnits(v string) {
	o.Units = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *IsochronesRequest) GetOptions() RouteOptions {
	if o == nil || IsNil(o.Options) {
		var ret RouteOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetOptionsOk() (*RouteOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *IsochronesRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given RouteOptions and assigns it to the Options field.
func (o *IsochronesRequest) SetOptions(v RouteOptions) {
	o.Options = &v
}

// GetAreaUnits returns the AreaUnits field value if set, zero value otherwise.
func (o *IsochronesRequest) GetAreaUnits() string {
	if o == nil || IsNil(o.AreaUnits) {
		var ret string
		return ret
	}
	return *o.AreaUnits
}

// GetAreaUnitsOk returns a tuple with the AreaUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetAreaUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.AreaUnits) {
		return nil, false
	}
	return o.AreaUnits, true
}

// HasAreaUnits returns a boolean if a field has been set.
func (o *IsochronesRequest) HasAreaUnits() bool {
	if o != nil && !IsNil(o.AreaUnits) {
		return true
	}

	return false
}

// SetAreaUnits gets a reference to the given string and assigns it to the AreaUnits field.
func (o *IsochronesRequest) SetAreaUnits(v string) {
	o.AreaUnits = &v
}

// GetIntersections returns the Intersections field value if set, zero value otherwise.
func (o *IsochronesRequest) GetIntersections() bool {
	if o == nil || IsNil(o.Intersections) {
		var ret bool
		return ret
	}
	return *o.Intersections
}

// GetIntersectionsOk returns a tuple with the Intersections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetIntersectionsOk() (*bool, bool) {
	if o == nil || IsNil(o.Intersections) {
		return nil, false
	}
	return o.Intersections, true
}

// HasIntersections returns a boolean if a field has been set.
func (o *IsochronesRequest) HasIntersections() bool {
	if o != nil && !IsNil(o.Intersections) {
		return true
	}

	return false
}

// SetIntersections gets a reference to the given bool and assigns it to the Intersections field.
func (o *IsochronesRequest) SetIntersections(v bool) {
	o.Intersections = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *IsochronesRequest) GetAttributes() []string {
	if o == nil || IsNil(o.Attributes) {
		var ret []string
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *IsochronesRequest) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []string and assigns it to the Attributes field.
func (o *IsochronesRequest) SetAttributes(v []string) {
	o.Attributes = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *IsochronesRequest) GetInterval() float64 {
	if o == nil || IsNil(o.Interval) {
		var ret float64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetIntervalOk() (*float64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *IsochronesRequest) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given float64 and assigns it to the Interval field.
func (o *IsochronesRequest) SetInterval(v float64) {
	o.Interval = &v
}

// GetSmoothing returns the Smoothing field value if set, zero value otherwise.
func (o *IsochronesRequest) GetSmoothing() float64 {
	if o == nil || IsNil(o.Smoothing) {
		var ret float64
		return ret
	}
	return *o.Smoothing
}

// GetSmoothingOk returns a tuple with the Smoothing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsochronesRequest) GetSmoothingOk() (*float64, bool) {
	if o == nil || IsNil(o.Smoothing) {
		return nil, false
	}
	return o.Smoothing, true
}

// HasSmoothing returns a boolean if a field has been set.
func (o *IsochronesRequest) HasSmoothing() bool {
	if o != nil && !IsNil(o.Smoothing) {
		return true
	}

	return false
}

// SetSmoothing gets a reference to the given float64 and assigns it to the Smoothing field.
func (o *IsochronesRequest) SetSmoothing(v float64) {
	o.Smoothing = &v
}

func (o IsochronesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IsochronesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["locations"] = o.Locations
	if !IsNil(o.LocationType) {
		toSerialize["location_type"] = o.LocationType
	}
	toSerialize["range"] = o.Range
	if !IsNil(o.RangeType) {
		toSerialize["range_type"] = o.RangeType
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.AreaUnits) {
		toSerialize["area_units"] = o.AreaUnits
	}
	if !IsNil(o.Intersections) {
		toSerialize["intersections"] = o.Intersections
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Smoothing) {
		toSerialize["smoothing"] = o.Smoothing
	}
	return toSerialize, nil
}

func (o *IsochronesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locations",
		"range",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIsochronesRequest := _IsochronesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIsochronesRequest)

	if err != nil {
		return err
	}

	*o = IsochronesRequest(varIsochronesRequest)

	return err
}

type NullableIsochronesRequest struct {
	value *IsochronesRequest
	isSet bool
}

func (v NullableIsochronesRequest) Get() *IsochronesRequest {
	return v.value
}

func (v *NullableIsochronesRequest) Set(val *IsochronesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIsochronesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIsochronesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsochronesRequest(val *IsochronesRequest) *NullableIsochronesRequest {
	return &NullableIsochronesRequest{value: val, isSet: true}
}

func (v NullableIsochronesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsochronesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


