/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
	"time"
)

// checks if the JSONLeg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONLeg{}

// JSONLeg Leg of a route
type JSONLeg struct {
	// The type of the leg, possible values are currently 'walk' and 'pt'.
	Type *string `json:"type,omitempty"`
	// The departure location of the leg.
	DepartureLocation *string `json:"departure_location,omitempty"`
	// The headsign of the public transport vehicle of the leg.
	TripHeadsign *string `json:"trip_headsign,omitempty"`
	// The public transport route name of the leg.
	RouteLongName *string `json:"route_long_name,omitempty"`
	// The public transport route name (short version) of the leg.
	RouteShortName *string `json:"route_short_name,omitempty"`
	// The route description of the leg (if provided in the GTFS data set).
	RouteDesc *string `json:"route_desc,omitempty"`
	// The route type of the leg (if provided in the GTFS data set).
	RouteType *int32 `json:"route_type,omitempty"`
	// The distance for the leg in metres.
	Distance *float64 `json:"distance,omitempty"`
	// The duration for the leg in seconds.
	Duration *float64 `json:"duration,omitempty"`
	// Departure date and time
	Departure *time.Time `json:"departure,omitempty"`
	// Arrival date and time
	Arrival *time.Time `json:"arrival,omitempty"`
	// The feed ID this public transport leg based its information from.
	FeedId *string `json:"feed_id,omitempty"`
	// The trip ID of this public transport leg.
	TripId *string `json:"trip_id,omitempty"`
	// The route ID of this public transport leg.
	RouteId *string `json:"route_id,omitempty"`
	// Whether the legs continues in the same vehicle as the previous one.
	IsInSameVehicleAsPrevious *bool `json:"is_in_same_vehicle_as_previous,omitempty"`
	// The geometry of the leg. This is an encoded polyline.
	Geometry *string `json:"geometry,omitempty"`
	// List containing the specific steps the segment consists of.
	Instructions []JSONStep `json:"instructions,omitempty"`
	// List containing the stops the along the leg.
	Stops []JSONPtStop `json:"stops,omitempty"`
}

// NewJSONLeg instantiates a new JSONLeg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONLeg() *JSONLeg {
	this := JSONLeg{}
	return &this
}

// NewJSONLegWithDefaults instantiates a new JSONLeg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONLegWithDefaults() *JSONLeg {
	this := JSONLeg{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JSONLeg) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JSONLeg) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *JSONLeg) SetType(v string) {
	o.Type = &v
}

// GetDepartureLocation returns the DepartureLocation field value if set, zero value otherwise.
func (o *JSONLeg) GetDepartureLocation() string {
	if o == nil || IsNil(o.DepartureLocation) {
		var ret string
		return ret
	}
	return *o.DepartureLocation
}

// GetDepartureLocationOk returns a tuple with the DepartureLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetDepartureLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DepartureLocation) {
		return nil, false
	}
	return o.DepartureLocation, true
}

// HasDepartureLocation returns a boolean if a field has been set.
func (o *JSONLeg) HasDepartureLocation() bool {
	if o != nil && !IsNil(o.DepartureLocation) {
		return true
	}

	return false
}

// SetDepartureLocation gets a reference to the given string and assigns it to the DepartureLocation field.
func (o *JSONLeg) SetDepartureLocation(v string) {
	o.DepartureLocation = &v
}

// GetTripHeadsign returns the TripHeadsign field value if set, zero value otherwise.
func (o *JSONLeg) GetTripHeadsign() string {
	if o == nil || IsNil(o.TripHeadsign) {
		var ret string
		return ret
	}
	return *o.TripHeadsign
}

// GetTripHeadsignOk returns a tuple with the TripHeadsign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetTripHeadsignOk() (*string, bool) {
	if o == nil || IsNil(o.TripHeadsign) {
		return nil, false
	}
	return o.TripHeadsign, true
}

// HasTripHeadsign returns a boolean if a field has been set.
func (o *JSONLeg) HasTripHeadsign() bool {
	if o != nil && !IsNil(o.TripHeadsign) {
		return true
	}

	return false
}

// SetTripHeadsign gets a reference to the given string and assigns it to the TripHeadsign field.
func (o *JSONLeg) SetTripHeadsign(v string) {
	o.TripHeadsign = &v
}

// GetRouteLongName returns the RouteLongName field value if set, zero value otherwise.
func (o *JSONLeg) GetRouteLongName() string {
	if o == nil || IsNil(o.RouteLongName) {
		var ret string
		return ret
	}
	return *o.RouteLongName
}

// GetRouteLongNameOk returns a tuple with the RouteLongName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetRouteLongNameOk() (*string, bool) {
	if o == nil || IsNil(o.RouteLongName) {
		return nil, false
	}
	return o.RouteLongName, true
}

// HasRouteLongName returns a boolean if a field has been set.
func (o *JSONLeg) HasRouteLongName() bool {
	if o != nil && !IsNil(o.RouteLongName) {
		return true
	}

	return false
}

// SetRouteLongName gets a reference to the given string and assigns it to the RouteLongName field.
func (o *JSONLeg) SetRouteLongName(v string) {
	o.RouteLongName = &v
}

// GetRouteShortName returns the RouteShortName field value if set, zero value otherwise.
func (o *JSONLeg) GetRouteShortName() string {
	if o == nil || IsNil(o.RouteShortName) {
		var ret string
		return ret
	}
	return *o.RouteShortName
}

// GetRouteShortNameOk returns a tuple with the RouteShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetRouteShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.RouteShortName) {
		return nil, false
	}
	return o.RouteShortName, true
}

// HasRouteShortName returns a boolean if a field has been set.
func (o *JSONLeg) HasRouteShortName() bool {
	if o != nil && !IsNil(o.RouteShortName) {
		return true
	}

	return false
}

// SetRouteShortName gets a reference to the given string and assigns it to the RouteShortName field.
func (o *JSONLeg) SetRouteShortName(v string) {
	o.RouteShortName = &v
}

// GetRouteDesc returns the RouteDesc field value if set, zero value otherwise.
func (o *JSONLeg) GetRouteDesc() string {
	if o == nil || IsNil(o.RouteDesc) {
		var ret string
		return ret
	}
	return *o.RouteDesc
}

// GetRouteDescOk returns a tuple with the RouteDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetRouteDescOk() (*string, bool) {
	if o == nil || IsNil(o.RouteDesc) {
		return nil, false
	}
	return o.RouteDesc, true
}

// HasRouteDesc returns a boolean if a field has been set.
func (o *JSONLeg) HasRouteDesc() bool {
	if o != nil && !IsNil(o.RouteDesc) {
		return true
	}

	return false
}

// SetRouteDesc gets a reference to the given string and assigns it to the RouteDesc field.
func (o *JSONLeg) SetRouteDesc(v string) {
	o.RouteDesc = &v
}

// GetRouteType returns the RouteType field value if set, zero value otherwise.
func (o *JSONLeg) GetRouteType() int32 {
	if o == nil || IsNil(o.RouteType) {
		var ret int32
		return ret
	}
	return *o.RouteType
}

// GetRouteTypeOk returns a tuple with the RouteType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetRouteTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.RouteType) {
		return nil, false
	}
	return o.RouteType, true
}

// HasRouteType returns a boolean if a field has been set.
func (o *JSONLeg) HasRouteType() bool {
	if o != nil && !IsNil(o.RouteType) {
		return true
	}

	return false
}

// SetRouteType gets a reference to the given int32 and assigns it to the RouteType field.
func (o *JSONLeg) SetRouteType(v int32) {
	o.RouteType = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *JSONLeg) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *JSONLeg) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *JSONLeg) SetDistance(v float64) {
	o.Distance = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *JSONLeg) GetDuration() float64 {
	if o == nil || IsNil(o.Duration) {
		var ret float64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetDurationOk() (*float64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *JSONLeg) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float64 and assigns it to the Duration field.
func (o *JSONLeg) SetDuration(v float64) {
	o.Duration = &v
}

// GetDeparture returns the Departure field value if set, zero value otherwise.
func (o *JSONLeg) GetDeparture() time.Time {
	if o == nil || IsNil(o.Departure) {
		var ret time.Time
		return ret
	}
	return *o.Departure
}

// GetDepartureOk returns a tuple with the Departure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetDepartureOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Departure) {
		return nil, false
	}
	return o.Departure, true
}

// HasDeparture returns a boolean if a field has been set.
func (o *JSONLeg) HasDeparture() bool {
	if o != nil && !IsNil(o.Departure) {
		return true
	}

	return false
}

// SetDeparture gets a reference to the given time.Time and assigns it to the Departure field.
func (o *JSONLeg) SetDeparture(v time.Time) {
	o.Departure = &v
}

// GetArrival returns the Arrival field value if set, zero value otherwise.
func (o *JSONLeg) GetArrival() time.Time {
	if o == nil || IsNil(o.Arrival) {
		var ret time.Time
		return ret
	}
	return *o.Arrival
}

// GetArrivalOk returns a tuple with the Arrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetArrivalOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Arrival) {
		return nil, false
	}
	return o.Arrival, true
}

// HasArrival returns a boolean if a field has been set.
func (o *JSONLeg) HasArrival() bool {
	if o != nil && !IsNil(o.Arrival) {
		return true
	}

	return false
}

// SetArrival gets a reference to the given time.Time and assigns it to the Arrival field.
func (o *JSONLeg) SetArrival(v time.Time) {
	o.Arrival = &v
}

// GetFeedId returns the FeedId field value if set, zero value otherwise.
func (o *JSONLeg) GetFeedId() string {
	if o == nil || IsNil(o.FeedId) {
		var ret string
		return ret
	}
	return *o.FeedId
}

// GetFeedIdOk returns a tuple with the FeedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetFeedIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeedId) {
		return nil, false
	}
	return o.FeedId, true
}

// HasFeedId returns a boolean if a field has been set.
func (o *JSONLeg) HasFeedId() bool {
	if o != nil && !IsNil(o.FeedId) {
		return true
	}

	return false
}

// SetFeedId gets a reference to the given string and assigns it to the FeedId field.
func (o *JSONLeg) SetFeedId(v string) {
	o.FeedId = &v
}

// GetTripId returns the TripId field value if set, zero value otherwise.
func (o *JSONLeg) GetTripId() string {
	if o == nil || IsNil(o.TripId) {
		var ret string
		return ret
	}
	return *o.TripId
}

// GetTripIdOk returns a tuple with the TripId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetTripIdOk() (*string, bool) {
	if o == nil || IsNil(o.TripId) {
		return nil, false
	}
	return o.TripId, true
}

// HasTripId returns a boolean if a field has been set.
func (o *JSONLeg) HasTripId() bool {
	if o != nil && !IsNil(o.TripId) {
		return true
	}

	return false
}

// SetTripId gets a reference to the given string and assigns it to the TripId field.
func (o *JSONLeg) SetTripId(v string) {
	o.TripId = &v
}

// GetRouteId returns the RouteId field value if set, zero value otherwise.
func (o *JSONLeg) GetRouteId() string {
	if o == nil || IsNil(o.RouteId) {
		var ret string
		return ret
	}
	return *o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetRouteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RouteId) {
		return nil, false
	}
	return o.RouteId, true
}

// HasRouteId returns a boolean if a field has been set.
func (o *JSONLeg) HasRouteId() bool {
	if o != nil && !IsNil(o.RouteId) {
		return true
	}

	return false
}

// SetRouteId gets a reference to the given string and assigns it to the RouteId field.
func (o *JSONLeg) SetRouteId(v string) {
	o.RouteId = &v
}

// GetIsInSameVehicleAsPrevious returns the IsInSameVehicleAsPrevious field value if set, zero value otherwise.
func (o *JSONLeg) GetIsInSameVehicleAsPrevious() bool {
	if o == nil || IsNil(o.IsInSameVehicleAsPrevious) {
		var ret bool
		return ret
	}
	return *o.IsInSameVehicleAsPrevious
}

// GetIsInSameVehicleAsPreviousOk returns a tuple with the IsInSameVehicleAsPrevious field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetIsInSameVehicleAsPreviousOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInSameVehicleAsPrevious) {
		return nil, false
	}
	return o.IsInSameVehicleAsPrevious, true
}

// HasIsInSameVehicleAsPrevious returns a boolean if a field has been set.
func (o *JSONLeg) HasIsInSameVehicleAsPrevious() bool {
	if o != nil && !IsNil(o.IsInSameVehicleAsPrevious) {
		return true
	}

	return false
}

// SetIsInSameVehicleAsPrevious gets a reference to the given bool and assigns it to the IsInSameVehicleAsPrevious field.
func (o *JSONLeg) SetIsInSameVehicleAsPrevious(v bool) {
	o.IsInSameVehicleAsPrevious = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *JSONLeg) GetGeometry() string {
	if o == nil || IsNil(o.Geometry) {
		var ret string
		return ret
	}
	return *o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetGeometryOk() (*string, bool) {
	if o == nil || IsNil(o.Geometry) {
		return nil, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *JSONLeg) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given string and assigns it to the Geometry field.
func (o *JSONLeg) SetGeometry(v string) {
	o.Geometry = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *JSONLeg) GetInstructions() []JSONStep {
	if o == nil || IsNil(o.Instructions) {
		var ret []JSONStep
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetInstructionsOk() ([]JSONStep, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *JSONLeg) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []JSONStep and assigns it to the Instructions field.
func (o *JSONLeg) SetInstructions(v []JSONStep) {
	o.Instructions = v
}

// GetStops returns the Stops field value if set, zero value otherwise.
func (o *JSONLeg) GetStops() []JSONPtStop {
	if o == nil || IsNil(o.Stops) {
		var ret []JSONPtStop
		return ret
	}
	return o.Stops
}

// GetStopsOk returns a tuple with the Stops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONLeg) GetStopsOk() ([]JSONPtStop, bool) {
	if o == nil || IsNil(o.Stops) {
		return nil, false
	}
	return o.Stops, true
}

// HasStops returns a boolean if a field has been set.
func (o *JSONLeg) HasStops() bool {
	if o != nil && !IsNil(o.Stops) {
		return true
	}

	return false
}

// SetStops gets a reference to the given []JSONPtStop and assigns it to the Stops field.
func (o *JSONLeg) SetStops(v []JSONPtStop) {
	o.Stops = v
}

func (o JSONLeg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONLeg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DepartureLocation) {
		toSerialize["departure_location"] = o.DepartureLocation
	}
	if !IsNil(o.TripHeadsign) {
		toSerialize["trip_headsign"] = o.TripHeadsign
	}
	if !IsNil(o.RouteLongName) {
		toSerialize["route_long_name"] = o.RouteLongName
	}
	if !IsNil(o.RouteShortName) {
		toSerialize["route_short_name"] = o.RouteShortName
	}
	if !IsNil(o.RouteDesc) {
		toSerialize["route_desc"] = o.RouteDesc
	}
	if !IsNil(o.RouteType) {
		toSerialize["route_type"] = o.RouteType
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Departure) {
		toSerialize["departure"] = o.Departure
	}
	if !IsNil(o.Arrival) {
		toSerialize["arrival"] = o.Arrival
	}
	if !IsNil(o.FeedId) {
		toSerialize["feed_id"] = o.FeedId
	}
	if !IsNil(o.TripId) {
		toSerialize["trip_id"] = o.TripId
	}
	if !IsNil(o.RouteId) {
		toSerialize["route_id"] = o.RouteId
	}
	if !IsNil(o.IsInSameVehicleAsPrevious) {
		toSerialize["is_in_same_vehicle_as_previous"] = o.IsInSameVehicleAsPrevious
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.Stops) {
		toSerialize["stops"] = o.Stops
	}
	return toSerialize, nil
}

type NullableJSONLeg struct {
	value *JSONLeg
	isSet bool
}

func (v NullableJSONLeg) Get() *JSONLeg {
	return v.value
}

func (v *NullableJSONLeg) Set(val *JSONLeg) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONLeg(val *JSONLeg) *NullableJSONLeg {
	return &NullableJSONLeg{value: val, isSet: true}
}

func (v NullableJSONLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


