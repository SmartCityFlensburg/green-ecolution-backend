/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the AlternativeRoutes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlternativeRoutes{}

// AlternativeRoutes Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.
type AlternativeRoutes struct {
	// Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.
	TargetCount *int32 `json:"target_count,omitempty"`
	// Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.
	WeightFactor *float64 `json:"weight_factor,omitempty"`
	// Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.
	ShareFactor *float64 `json:"share_factor,omitempty"`
}

// NewAlternativeRoutes instantiates a new AlternativeRoutes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlternativeRoutes() *AlternativeRoutes {
	this := AlternativeRoutes{}
	return &this
}

// NewAlternativeRoutesWithDefaults instantiates a new AlternativeRoutes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlternativeRoutesWithDefaults() *AlternativeRoutes {
	this := AlternativeRoutes{}
	return &this
}

// GetTargetCount returns the TargetCount field value if set, zero value otherwise.
func (o *AlternativeRoutes) GetTargetCount() int32 {
	if o == nil || IsNil(o.TargetCount) {
		var ret int32
		return ret
	}
	return *o.TargetCount
}

// GetTargetCountOk returns a tuple with the TargetCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternativeRoutes) GetTargetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetCount) {
		return nil, false
	}
	return o.TargetCount, true
}

// HasTargetCount returns a boolean if a field has been set.
func (o *AlternativeRoutes) HasTargetCount() bool {
	if o != nil && !IsNil(o.TargetCount) {
		return true
	}

	return false
}

// SetTargetCount gets a reference to the given int32 and assigns it to the TargetCount field.
func (o *AlternativeRoutes) SetTargetCount(v int32) {
	o.TargetCount = &v
}

// GetWeightFactor returns the WeightFactor field value if set, zero value otherwise.
func (o *AlternativeRoutes) GetWeightFactor() float64 {
	if o == nil || IsNil(o.WeightFactor) {
		var ret float64
		return ret
	}
	return *o.WeightFactor
}

// GetWeightFactorOk returns a tuple with the WeightFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternativeRoutes) GetWeightFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.WeightFactor) {
		return nil, false
	}
	return o.WeightFactor, true
}

// HasWeightFactor returns a boolean if a field has been set.
func (o *AlternativeRoutes) HasWeightFactor() bool {
	if o != nil && !IsNil(o.WeightFactor) {
		return true
	}

	return false
}

// SetWeightFactor gets a reference to the given float64 and assigns it to the WeightFactor field.
func (o *AlternativeRoutes) SetWeightFactor(v float64) {
	o.WeightFactor = &v
}

// GetShareFactor returns the ShareFactor field value if set, zero value otherwise.
func (o *AlternativeRoutes) GetShareFactor() float64 {
	if o == nil || IsNil(o.ShareFactor) {
		var ret float64
		return ret
	}
	return *o.ShareFactor
}

// GetShareFactorOk returns a tuple with the ShareFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternativeRoutes) GetShareFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.ShareFactor) {
		return nil, false
	}
	return o.ShareFactor, true
}

// HasShareFactor returns a boolean if a field has been set.
func (o *AlternativeRoutes) HasShareFactor() bool {
	if o != nil && !IsNil(o.ShareFactor) {
		return true
	}

	return false
}

// SetShareFactor gets a reference to the given float64 and assigns it to the ShareFactor field.
func (o *AlternativeRoutes) SetShareFactor(v float64) {
	o.ShareFactor = &v
}

func (o AlternativeRoutes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlternativeRoutes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetCount) {
		toSerialize["target_count"] = o.TargetCount
	}
	if !IsNil(o.WeightFactor) {
		toSerialize["weight_factor"] = o.WeightFactor
	}
	if !IsNil(o.ShareFactor) {
		toSerialize["share_factor"] = o.ShareFactor
	}
	return toSerialize, nil
}

type NullableAlternativeRoutes struct {
	value *AlternativeRoutes
	isSet bool
}

func (v NullableAlternativeRoutes) Get() *AlternativeRoutes {
	return v.value
}

func (v *NullableAlternativeRoutes) Set(val *AlternativeRoutes) {
	v.value = val
	v.isSet = true
}

func (v NullableAlternativeRoutes) IsSet() bool {
	return v.isSet
}

func (v *NullableAlternativeRoutes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlternativeRoutes(val *AlternativeRoutes) *NullableAlternativeRoutes {
	return &NullableAlternativeRoutes{value: val, isSet: true}
}

func (v NullableAlternativeRoutes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlternativeRoutes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


