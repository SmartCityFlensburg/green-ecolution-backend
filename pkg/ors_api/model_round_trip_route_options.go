/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the RoundTripRouteOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoundTripRouteOptions{}

// RoundTripRouteOptions Specifies the parameters for generating round trip routes.
type RoundTripRouteOptions struct {
	// The target length of the route in `m` (note that this is a preferred value, but results may be different).
	Length *float32 `json:"length,omitempty"`
	// The number of points to use on the route. Larger values create more circular routes.
	Points *int32 `json:"points,omitempty"`
	// A seed to use for adding randomisation to the overall direction of the generated route
	Seed *int64 `json:"seed,omitempty"`
}

// NewRoundTripRouteOptions instantiates a new RoundTripRouteOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoundTripRouteOptions() *RoundTripRouteOptions {
	this := RoundTripRouteOptions{}
	return &this
}

// NewRoundTripRouteOptionsWithDefaults instantiates a new RoundTripRouteOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoundTripRouteOptionsWithDefaults() *RoundTripRouteOptions {
	this := RoundTripRouteOptions{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *RoundTripRouteOptions) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoundTripRouteOptions) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *RoundTripRouteOptions) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *RoundTripRouteOptions) SetLength(v float32) {
	o.Length = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *RoundTripRouteOptions) GetPoints() int32 {
	if o == nil || IsNil(o.Points) {
		var ret int32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoundTripRouteOptions) GetPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *RoundTripRouteOptions) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given int32 and assigns it to the Points field.
func (o *RoundTripRouteOptions) SetPoints(v int32) {
	o.Points = &v
}

// GetSeed returns the Seed field value if set, zero value otherwise.
func (o *RoundTripRouteOptions) GetSeed() int64 {
	if o == nil || IsNil(o.Seed) {
		var ret int64
		return ret
	}
	return *o.Seed
}

// GetSeedOk returns a tuple with the Seed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoundTripRouteOptions) GetSeedOk() (*int64, bool) {
	if o == nil || IsNil(o.Seed) {
		return nil, false
	}
	return o.Seed, true
}

// HasSeed returns a boolean if a field has been set.
func (o *RoundTripRouteOptions) HasSeed() bool {
	if o != nil && !IsNil(o.Seed) {
		return true
	}

	return false
}

// SetSeed gets a reference to the given int64 and assigns it to the Seed field.
func (o *RoundTripRouteOptions) SetSeed(v int64) {
	o.Seed = &v
}

func (o RoundTripRouteOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoundTripRouteOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.Seed) {
		toSerialize["seed"] = o.Seed
	}
	return toSerialize, nil
}

type NullableRoundTripRouteOptions struct {
	value *RoundTripRouteOptions
	isSet bool
}

func (v NullableRoundTripRouteOptions) Get() *RoundTripRouteOptions {
	return v.value
}

func (v *NullableRoundTripRouteOptions) Set(val *RoundTripRouteOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRoundTripRouteOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRoundTripRouteOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoundTripRouteOptions(val *RoundTripRouteOptions) *NullableRoundTripRouteOptions {
	return &NullableRoundTripRouteOptions{value: val, isSet: true}
}

func (v NullableRoundTripRouteOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoundTripRouteOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


