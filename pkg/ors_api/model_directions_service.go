/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DirectionsService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectionsService{}

// DirectionsService The JSON body request sent to the routing service which defines options and parameters regarding the route to generate.
type DirectionsService struct {
	// The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)
	Coordinates [][]float64 `json:"coordinates"`
	ProfileName *string `json:"profileName,omitempty"`
	// Arbitrary identification string of the request reflected in the meta information.
	Id *string `json:"id,omitempty"`
	// Specifies the route preference
	Preference *string `json:"preference,omitempty"`
	// Specifies the distance unit.
	Units *string `json:"units,omitempty"`
	// Language for the route instructions.
	Language *string `json:"language,omitempty"`
	// Specifies whether to return geometry. 
	Geometry *bool `json:"geometry,omitempty"`
	// Specifies whether to return instructions.
	Instructions *bool `json:"instructions,omitempty"`
	// Select html for more verbose instructions.
	InstructionsFormat *string `json:"instructions_format,omitempty"`
	// Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. 
	RoundaboutExits *bool `json:"roundabout_exits,omitempty"`
	// List of route attributes
	Attributes []string `json:"attributes,omitempty"`
	// Specifies whether the maneuver object is included into the step object or not. 
	Maneuvers *bool `json:"maneuvers,omitempty"`
	// A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.
	Radiuses []float64 `json:"radiuses,omitempty"`
	// Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to. \"For example `bearings=[[45,10],[120,20]]`. \"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing. \"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used. \"The number of pairs must correspond to the number of waypoints. \"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached. \"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.
	Bearings [][]float64 `json:"bearings,omitempty"`
	// Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.
	ContinueStraight *bool `json:"continue_straight,omitempty"`
	// Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.
	Elevation *bool `json:"elevation,omitempty"`
	// The extra info items to include in the response
	ExtraInfo []string `json:"extra_info,omitempty"`
	Options *RouteOptions `json:"options,omitempty"`
	// Suppress warning messages in the response
	SuppressWarnings *bool `json:"suppress_warnings,omitempty"`
	// Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.
	GeometrySimplify *bool `json:"geometry_simplify,omitempty"`
	// Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.
	SkipSegments []int32 `json:"skip_segments,omitempty"`
	AlternativeRoutes *AlternativeRoutes `json:"alternative_routes,omitempty"`
	// The maximum speed specified by user.
	MaximumSpeed *float64 `json:"maximum_speed,omitempty"`
	// If true, return a public transport schedule starting at <departure> for the next <schedule_duration> minutes.
	Schedule *bool `json:"schedule,omitempty"`
	// The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations
	ScheduleDuration *string `json:"schedule_duration,omitempty"`
	// The maximum amount of entries that should be returned when requesting a schedule.
	ScheduleRows *int32 `json:"schedule_rows,omitempty"`
	// Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations
	WalkingTime *string `json:"walking_time,omitempty"`
	// Specifies if transfers as criterion should be ignored.
	IgnoreTransfers *bool `json:"ignore_transfers,omitempty"`
}

type _DirectionsService DirectionsService

// NewDirectionsService instantiates a new DirectionsService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectionsService(coordinates [][]float64) *DirectionsService {
	this := DirectionsService{}
	this.Coordinates = coordinates
	var preference string = "recommended"
	this.Preference = &preference
	var units string = "m"
	this.Units = &units
	var language string = "en"
	this.Language = &language
	var geometry bool = true
	this.Geometry = &geometry
	var instructions bool = true
	this.Instructions = &instructions
	var instructionsFormat string = "text"
	this.InstructionsFormat = &instructionsFormat
	var roundaboutExits bool = false
	this.RoundaboutExits = &roundaboutExits
	var maneuvers bool = false
	this.Maneuvers = &maneuvers
	var continueStraight bool = false
	this.ContinueStraight = &continueStraight
	var geometrySimplify bool = false
	this.GeometrySimplify = &geometrySimplify
	var schedule bool = false
	this.Schedule = &schedule
	var walkingTime string = "PT15M"
	this.WalkingTime = &walkingTime
	var ignoreTransfers bool = false
	this.IgnoreTransfers = &ignoreTransfers
	return &this
}

// NewDirectionsServiceWithDefaults instantiates a new DirectionsService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectionsServiceWithDefaults() *DirectionsService {
	this := DirectionsService{}
	var preference string = "recommended"
	this.Preference = &preference
	var units string = "m"
	this.Units = &units
	var language string = "en"
	this.Language = &language
	var geometry bool = true
	this.Geometry = &geometry
	var instructions bool = true
	this.Instructions = &instructions
	var instructionsFormat string = "text"
	this.InstructionsFormat = &instructionsFormat
	var roundaboutExits bool = false
	this.RoundaboutExits = &roundaboutExits
	var maneuvers bool = false
	this.Maneuvers = &maneuvers
	var continueStraight bool = false
	this.ContinueStraight = &continueStraight
	var geometrySimplify bool = false
	this.GeometrySimplify = &geometrySimplify
	var schedule bool = false
	this.Schedule = &schedule
	var walkingTime string = "PT15M"
	this.WalkingTime = &walkingTime
	var ignoreTransfers bool = false
	this.IgnoreTransfers = &ignoreTransfers
	return &this
}

// GetCoordinates returns the Coordinates field value
func (o *DirectionsService) GetCoordinates() [][]float64 {
	if o == nil {
		var ret [][]float64
		return ret
	}

	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetCoordinatesOk() ([][]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Coordinates, true
}

// SetCoordinates sets field value
func (o *DirectionsService) SetCoordinates(v [][]float64) {
	o.Coordinates = v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *DirectionsService) GetProfileName() string {
	if o == nil || IsNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *DirectionsService) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *DirectionsService) SetProfileName(v string) {
	o.ProfileName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DirectionsService) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DirectionsService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DirectionsService) SetId(v string) {
	o.Id = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *DirectionsService) GetPreference() string {
	if o == nil || IsNil(o.Preference) {
		var ret string
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetPreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *DirectionsService) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given string and assigns it to the Preference field.
func (o *DirectionsService) SetPreference(v string) {
	o.Preference = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *DirectionsService) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *DirectionsService) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *DirectionsService) SetUnits(v string) {
	o.Units = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DirectionsService) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DirectionsService) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DirectionsService) SetLanguage(v string) {
	o.Language = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *DirectionsService) GetGeometry() bool {
	if o == nil || IsNil(o.Geometry) {
		var ret bool
		return ret
	}
	return *o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetGeometryOk() (*bool, bool) {
	if o == nil || IsNil(o.Geometry) {
		return nil, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *DirectionsService) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given bool and assigns it to the Geometry field.
func (o *DirectionsService) SetGeometry(v bool) {
	o.Geometry = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *DirectionsService) GetInstructions() bool {
	if o == nil || IsNil(o.Instructions) {
		var ret bool
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetInstructionsOk() (*bool, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *DirectionsService) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given bool and assigns it to the Instructions field.
func (o *DirectionsService) SetInstructions(v bool) {
	o.Instructions = &v
}

// GetInstructionsFormat returns the InstructionsFormat field value if set, zero value otherwise.
func (o *DirectionsService) GetInstructionsFormat() string {
	if o == nil || IsNil(o.InstructionsFormat) {
		var ret string
		return ret
	}
	return *o.InstructionsFormat
}

// GetInstructionsFormatOk returns a tuple with the InstructionsFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetInstructionsFormatOk() (*string, bool) {
	if o == nil || IsNil(o.InstructionsFormat) {
		return nil, false
	}
	return o.InstructionsFormat, true
}

// HasInstructionsFormat returns a boolean if a field has been set.
func (o *DirectionsService) HasInstructionsFormat() bool {
	if o != nil && !IsNil(o.InstructionsFormat) {
		return true
	}

	return false
}

// SetInstructionsFormat gets a reference to the given string and assigns it to the InstructionsFormat field.
func (o *DirectionsService) SetInstructionsFormat(v string) {
	o.InstructionsFormat = &v
}

// GetRoundaboutExits returns the RoundaboutExits field value if set, zero value otherwise.
func (o *DirectionsService) GetRoundaboutExits() bool {
	if o == nil || IsNil(o.RoundaboutExits) {
		var ret bool
		return ret
	}
	return *o.RoundaboutExits
}

// GetRoundaboutExitsOk returns a tuple with the RoundaboutExits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetRoundaboutExitsOk() (*bool, bool) {
	if o == nil || IsNil(o.RoundaboutExits) {
		return nil, false
	}
	return o.RoundaboutExits, true
}

// HasRoundaboutExits returns a boolean if a field has been set.
func (o *DirectionsService) HasRoundaboutExits() bool {
	if o != nil && !IsNil(o.RoundaboutExits) {
		return true
	}

	return false
}

// SetRoundaboutExits gets a reference to the given bool and assigns it to the RoundaboutExits field.
func (o *DirectionsService) SetRoundaboutExits(v bool) {
	o.RoundaboutExits = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *DirectionsService) GetAttributes() []string {
	if o == nil || IsNil(o.Attributes) {
		var ret []string
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *DirectionsService) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []string and assigns it to the Attributes field.
func (o *DirectionsService) SetAttributes(v []string) {
	o.Attributes = v
}

// GetManeuvers returns the Maneuvers field value if set, zero value otherwise.
func (o *DirectionsService) GetManeuvers() bool {
	if o == nil || IsNil(o.Maneuvers) {
		var ret bool
		return ret
	}
	return *o.Maneuvers
}

// GetManeuversOk returns a tuple with the Maneuvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetManeuversOk() (*bool, bool) {
	if o == nil || IsNil(o.Maneuvers) {
		return nil, false
	}
	return o.Maneuvers, true
}

// HasManeuvers returns a boolean if a field has been set.
func (o *DirectionsService) HasManeuvers() bool {
	if o != nil && !IsNil(o.Maneuvers) {
		return true
	}

	return false
}

// SetManeuvers gets a reference to the given bool and assigns it to the Maneuvers field.
func (o *DirectionsService) SetManeuvers(v bool) {
	o.Maneuvers = &v
}

// GetRadiuses returns the Radiuses field value if set, zero value otherwise.
func (o *DirectionsService) GetRadiuses() []float64 {
	if o == nil || IsNil(o.Radiuses) {
		var ret []float64
		return ret
	}
	return o.Radiuses
}

// GetRadiusesOk returns a tuple with the Radiuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetRadiusesOk() ([]float64, bool) {
	if o == nil || IsNil(o.Radiuses) {
		return nil, false
	}
	return o.Radiuses, true
}

// HasRadiuses returns a boolean if a field has been set.
func (o *DirectionsService) HasRadiuses() bool {
	if o != nil && !IsNil(o.Radiuses) {
		return true
	}

	return false
}

// SetRadiuses gets a reference to the given []float64 and assigns it to the Radiuses field.
func (o *DirectionsService) SetRadiuses(v []float64) {
	o.Radiuses = v
}

// GetBearings returns the Bearings field value if set, zero value otherwise.
func (o *DirectionsService) GetBearings() [][]float64 {
	if o == nil || IsNil(o.Bearings) {
		var ret [][]float64
		return ret
	}
	return o.Bearings
}

// GetBearingsOk returns a tuple with the Bearings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetBearingsOk() ([][]float64, bool) {
	if o == nil || IsNil(o.Bearings) {
		return nil, false
	}
	return o.Bearings, true
}

// HasBearings returns a boolean if a field has been set.
func (o *DirectionsService) HasBearings() bool {
	if o != nil && !IsNil(o.Bearings) {
		return true
	}

	return false
}

// SetBearings gets a reference to the given [][]float64 and assigns it to the Bearings field.
func (o *DirectionsService) SetBearings(v [][]float64) {
	o.Bearings = v
}

// GetContinueStraight returns the ContinueStraight field value if set, zero value otherwise.
func (o *DirectionsService) GetContinueStraight() bool {
	if o == nil || IsNil(o.ContinueStraight) {
		var ret bool
		return ret
	}
	return *o.ContinueStraight
}

// GetContinueStraightOk returns a tuple with the ContinueStraight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetContinueStraightOk() (*bool, bool) {
	if o == nil || IsNil(o.ContinueStraight) {
		return nil, false
	}
	return o.ContinueStraight, true
}

// HasContinueStraight returns a boolean if a field has been set.
func (o *DirectionsService) HasContinueStraight() bool {
	if o != nil && !IsNil(o.ContinueStraight) {
		return true
	}

	return false
}

// SetContinueStraight gets a reference to the given bool and assigns it to the ContinueStraight field.
func (o *DirectionsService) SetContinueStraight(v bool) {
	o.ContinueStraight = &v
}

// GetElevation returns the Elevation field value if set, zero value otherwise.
func (o *DirectionsService) GetElevation() bool {
	if o == nil || IsNil(o.Elevation) {
		var ret bool
		return ret
	}
	return *o.Elevation
}

// GetElevationOk returns a tuple with the Elevation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetElevationOk() (*bool, bool) {
	if o == nil || IsNil(o.Elevation) {
		return nil, false
	}
	return o.Elevation, true
}

// HasElevation returns a boolean if a field has been set.
func (o *DirectionsService) HasElevation() bool {
	if o != nil && !IsNil(o.Elevation) {
		return true
	}

	return false
}

// SetElevation gets a reference to the given bool and assigns it to the Elevation field.
func (o *DirectionsService) SetElevation(v bool) {
	o.Elevation = &v
}

// GetExtraInfo returns the ExtraInfo field value if set, zero value otherwise.
func (o *DirectionsService) GetExtraInfo() []string {
	if o == nil || IsNil(o.ExtraInfo) {
		var ret []string
		return ret
	}
	return o.ExtraInfo
}

// GetExtraInfoOk returns a tuple with the ExtraInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetExtraInfoOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtraInfo) {
		return nil, false
	}
	return o.ExtraInfo, true
}

// HasExtraInfo returns a boolean if a field has been set.
func (o *DirectionsService) HasExtraInfo() bool {
	if o != nil && !IsNil(o.ExtraInfo) {
		return true
	}

	return false
}

// SetExtraInfo gets a reference to the given []string and assigns it to the ExtraInfo field.
func (o *DirectionsService) SetExtraInfo(v []string) {
	o.ExtraInfo = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DirectionsService) GetOptions() RouteOptions {
	if o == nil || IsNil(o.Options) {
		var ret RouteOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetOptionsOk() (*RouteOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DirectionsService) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given RouteOptions and assigns it to the Options field.
func (o *DirectionsService) SetOptions(v RouteOptions) {
	o.Options = &v
}

// GetSuppressWarnings returns the SuppressWarnings field value if set, zero value otherwise.
func (o *DirectionsService) GetSuppressWarnings() bool {
	if o == nil || IsNil(o.SuppressWarnings) {
		var ret bool
		return ret
	}
	return *o.SuppressWarnings
}

// GetSuppressWarningsOk returns a tuple with the SuppressWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetSuppressWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.SuppressWarnings) {
		return nil, false
	}
	return o.SuppressWarnings, true
}

// HasSuppressWarnings returns a boolean if a field has been set.
func (o *DirectionsService) HasSuppressWarnings() bool {
	if o != nil && !IsNil(o.SuppressWarnings) {
		return true
	}

	return false
}

// SetSuppressWarnings gets a reference to the given bool and assigns it to the SuppressWarnings field.
func (o *DirectionsService) SetSuppressWarnings(v bool) {
	o.SuppressWarnings = &v
}

// GetGeometrySimplify returns the GeometrySimplify field value if set, zero value otherwise.
func (o *DirectionsService) GetGeometrySimplify() bool {
	if o == nil || IsNil(o.GeometrySimplify) {
		var ret bool
		return ret
	}
	return *o.GeometrySimplify
}

// GetGeometrySimplifyOk returns a tuple with the GeometrySimplify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetGeometrySimplifyOk() (*bool, bool) {
	if o == nil || IsNil(o.GeometrySimplify) {
		return nil, false
	}
	return o.GeometrySimplify, true
}

// HasGeometrySimplify returns a boolean if a field has been set.
func (o *DirectionsService) HasGeometrySimplify() bool {
	if o != nil && !IsNil(o.GeometrySimplify) {
		return true
	}

	return false
}

// SetGeometrySimplify gets a reference to the given bool and assigns it to the GeometrySimplify field.
func (o *DirectionsService) SetGeometrySimplify(v bool) {
	o.GeometrySimplify = &v
}

// GetSkipSegments returns the SkipSegments field value if set, zero value otherwise.
func (o *DirectionsService) GetSkipSegments() []int32 {
	if o == nil || IsNil(o.SkipSegments) {
		var ret []int32
		return ret
	}
	return o.SkipSegments
}

// GetSkipSegmentsOk returns a tuple with the SkipSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetSkipSegmentsOk() ([]int32, bool) {
	if o == nil || IsNil(o.SkipSegments) {
		return nil, false
	}
	return o.SkipSegments, true
}

// HasSkipSegments returns a boolean if a field has been set.
func (o *DirectionsService) HasSkipSegments() bool {
	if o != nil && !IsNil(o.SkipSegments) {
		return true
	}

	return false
}

// SetSkipSegments gets a reference to the given []int32 and assigns it to the SkipSegments field.
func (o *DirectionsService) SetSkipSegments(v []int32) {
	o.SkipSegments = v
}

// GetAlternativeRoutes returns the AlternativeRoutes field value if set, zero value otherwise.
func (o *DirectionsService) GetAlternativeRoutes() AlternativeRoutes {
	if o == nil || IsNil(o.AlternativeRoutes) {
		var ret AlternativeRoutes
		return ret
	}
	return *o.AlternativeRoutes
}

// GetAlternativeRoutesOk returns a tuple with the AlternativeRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetAlternativeRoutesOk() (*AlternativeRoutes, bool) {
	if o == nil || IsNil(o.AlternativeRoutes) {
		return nil, false
	}
	return o.AlternativeRoutes, true
}

// HasAlternativeRoutes returns a boolean if a field has been set.
func (o *DirectionsService) HasAlternativeRoutes() bool {
	if o != nil && !IsNil(o.AlternativeRoutes) {
		return true
	}

	return false
}

// SetAlternativeRoutes gets a reference to the given AlternativeRoutes and assigns it to the AlternativeRoutes field.
func (o *DirectionsService) SetAlternativeRoutes(v AlternativeRoutes) {
	o.AlternativeRoutes = &v
}

// GetMaximumSpeed returns the MaximumSpeed field value if set, zero value otherwise.
func (o *DirectionsService) GetMaximumSpeed() float64 {
	if o == nil || IsNil(o.MaximumSpeed) {
		var ret float64
		return ret
	}
	return *o.MaximumSpeed
}

// GetMaximumSpeedOk returns a tuple with the MaximumSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetMaximumSpeedOk() (*float64, bool) {
	if o == nil || IsNil(o.MaximumSpeed) {
		return nil, false
	}
	return o.MaximumSpeed, true
}

// HasMaximumSpeed returns a boolean if a field has been set.
func (o *DirectionsService) HasMaximumSpeed() bool {
	if o != nil && !IsNil(o.MaximumSpeed) {
		return true
	}

	return false
}

// SetMaximumSpeed gets a reference to the given float64 and assigns it to the MaximumSpeed field.
func (o *DirectionsService) SetMaximumSpeed(v float64) {
	o.MaximumSpeed = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *DirectionsService) GetSchedule() bool {
	if o == nil || IsNil(o.Schedule) {
		var ret bool
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *DirectionsService) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given bool and assigns it to the Schedule field.
func (o *DirectionsService) SetSchedule(v bool) {
	o.Schedule = &v
}

// GetScheduleDuration returns the ScheduleDuration field value if set, zero value otherwise.
func (o *DirectionsService) GetScheduleDuration() string {
	if o == nil || IsNil(o.ScheduleDuration) {
		var ret string
		return ret
	}
	return *o.ScheduleDuration
}

// GetScheduleDurationOk returns a tuple with the ScheduleDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetScheduleDurationOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleDuration) {
		return nil, false
	}
	return o.ScheduleDuration, true
}

// HasScheduleDuration returns a boolean if a field has been set.
func (o *DirectionsService) HasScheduleDuration() bool {
	if o != nil && !IsNil(o.ScheduleDuration) {
		return true
	}

	return false
}

// SetScheduleDuration gets a reference to the given string and assigns it to the ScheduleDuration field.
func (o *DirectionsService) SetScheduleDuration(v string) {
	o.ScheduleDuration = &v
}

// GetScheduleRows returns the ScheduleRows field value if set, zero value otherwise.
func (o *DirectionsService) GetScheduleRows() int32 {
	if o == nil || IsNil(o.ScheduleRows) {
		var ret int32
		return ret
	}
	return *o.ScheduleRows
}

// GetScheduleRowsOk returns a tuple with the ScheduleRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetScheduleRowsOk() (*int32, bool) {
	if o == nil || IsNil(o.ScheduleRows) {
		return nil, false
	}
	return o.ScheduleRows, true
}

// HasScheduleRows returns a boolean if a field has been set.
func (o *DirectionsService) HasScheduleRows() bool {
	if o != nil && !IsNil(o.ScheduleRows) {
		return true
	}

	return false
}

// SetScheduleRows gets a reference to the given int32 and assigns it to the ScheduleRows field.
func (o *DirectionsService) SetScheduleRows(v int32) {
	o.ScheduleRows = &v
}

// GetWalkingTime returns the WalkingTime field value if set, zero value otherwise.
func (o *DirectionsService) GetWalkingTime() string {
	if o == nil || IsNil(o.WalkingTime) {
		var ret string
		return ret
	}
	return *o.WalkingTime
}

// GetWalkingTimeOk returns a tuple with the WalkingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetWalkingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.WalkingTime) {
		return nil, false
	}
	return o.WalkingTime, true
}

// HasWalkingTime returns a boolean if a field has been set.
func (o *DirectionsService) HasWalkingTime() bool {
	if o != nil && !IsNil(o.WalkingTime) {
		return true
	}

	return false
}

// SetWalkingTime gets a reference to the given string and assigns it to the WalkingTime field.
func (o *DirectionsService) SetWalkingTime(v string) {
	o.WalkingTime = &v
}

// GetIgnoreTransfers returns the IgnoreTransfers field value if set, zero value otherwise.
func (o *DirectionsService) GetIgnoreTransfers() bool {
	if o == nil || IsNil(o.IgnoreTransfers) {
		var ret bool
		return ret
	}
	return *o.IgnoreTransfers
}

// GetIgnoreTransfersOk returns a tuple with the IgnoreTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectionsService) GetIgnoreTransfersOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreTransfers) {
		return nil, false
	}
	return o.IgnoreTransfers, true
}

// HasIgnoreTransfers returns a boolean if a field has been set.
func (o *DirectionsService) HasIgnoreTransfers() bool {
	if o != nil && !IsNil(o.IgnoreTransfers) {
		return true
	}

	return false
}

// SetIgnoreTransfers gets a reference to the given bool and assigns it to the IgnoreTransfers field.
func (o *DirectionsService) SetIgnoreTransfers(v bool) {
	o.IgnoreTransfers = &v
}

func (o DirectionsService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectionsService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coordinates"] = o.Coordinates
	if !IsNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.InstructionsFormat) {
		toSerialize["instructions_format"] = o.InstructionsFormat
	}
	if !IsNil(o.RoundaboutExits) {
		toSerialize["roundabout_exits"] = o.RoundaboutExits
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Maneuvers) {
		toSerialize["maneuvers"] = o.Maneuvers
	}
	if !IsNil(o.Radiuses) {
		toSerialize["radiuses"] = o.Radiuses
	}
	if !IsNil(o.Bearings) {
		toSerialize["bearings"] = o.Bearings
	}
	if !IsNil(o.ContinueStraight) {
		toSerialize["continue_straight"] = o.ContinueStraight
	}
	if !IsNil(o.Elevation) {
		toSerialize["elevation"] = o.Elevation
	}
	if !IsNil(o.ExtraInfo) {
		toSerialize["extra_info"] = o.ExtraInfo
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.SuppressWarnings) {
		toSerialize["suppress_warnings"] = o.SuppressWarnings
	}
	if !IsNil(o.GeometrySimplify) {
		toSerialize["geometry_simplify"] = o.GeometrySimplify
	}
	if !IsNil(o.SkipSegments) {
		toSerialize["skip_segments"] = o.SkipSegments
	}
	if !IsNil(o.AlternativeRoutes) {
		toSerialize["alternative_routes"] = o.AlternativeRoutes
	}
	if !IsNil(o.MaximumSpeed) {
		toSerialize["maximum_speed"] = o.MaximumSpeed
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.ScheduleDuration) {
		toSerialize["schedule_duration"] = o.ScheduleDuration
	}
	if !IsNil(o.ScheduleRows) {
		toSerialize["schedule_rows"] = o.ScheduleRows
	}
	if !IsNil(o.WalkingTime) {
		toSerialize["walking_time"] = o.WalkingTime
	}
	if !IsNil(o.IgnoreTransfers) {
		toSerialize["ignore_transfers"] = o.IgnoreTransfers
	}
	return toSerialize, nil
}

func (o *DirectionsService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coordinates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDirectionsService := _DirectionsService{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDirectionsService)

	if err != nil {
		return err
	}

	*o = DirectionsService(varDirectionsService)

	return err
}

type NullableDirectionsService struct {
	value *DirectionsService
	isSet bool
}

func (v NullableDirectionsService) Get() *DirectionsService {
	return v.value
}

func (v *NullableDirectionsService) Set(val *DirectionsService) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectionsService) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectionsService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectionsService(val *DirectionsService) *NullableDirectionsService {
	return &NullableDirectionsService{value: val, isSet: true}
}

func (v NullableDirectionsService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectionsService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


