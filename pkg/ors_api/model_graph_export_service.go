/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GraphExportService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphExportService{}

// GraphExportService The request payload
type GraphExportService struct {
	// The bounding box to use for the request as an array of `longitude/latitude` pairs
	Bbox [][]float64 `json:"bbox"`
	ProfileName *string `json:"profileName,omitempty"`
	// Arbitrary identification string of the request reflected in the meta information.
	Id *string `json:"id,omitempty"`
}

type _GraphExportService GraphExportService

// NewGraphExportService instantiates a new GraphExportService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphExportService(bbox [][]float64) *GraphExportService {
	this := GraphExportService{}
	this.Bbox = bbox
	return &this
}

// NewGraphExportServiceWithDefaults instantiates a new GraphExportService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphExportServiceWithDefaults() *GraphExportService {
	this := GraphExportService{}
	return &this
}

// GetBbox returns the Bbox field value
func (o *GraphExportService) GetBbox() [][]float64 {
	if o == nil {
		var ret [][]float64
		return ret
	}

	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value
// and a boolean to check if the value has been set.
func (o *GraphExportService) GetBboxOk() ([][]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bbox, true
}

// SetBbox sets field value
func (o *GraphExportService) SetBbox(v [][]float64) {
	o.Bbox = v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *GraphExportService) GetProfileName() string {
	if o == nil || IsNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphExportService) GetProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *GraphExportService) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *GraphExportService) SetProfileName(v string) {
	o.ProfileName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GraphExportService) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphExportService) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GraphExportService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GraphExportService) SetId(v string) {
	o.Id = &v
}

func (o GraphExportService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphExportService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bbox"] = o.Bbox
	if !IsNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *GraphExportService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bbox",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGraphExportService := _GraphExportService{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGraphExportService)

	if err != nil {
		return err
	}

	*o = GraphExportService(varGraphExportService)

	return err
}

type NullableGraphExportService struct {
	value *GraphExportService
	isSet bool
}

func (v NullableGraphExportService) Get() *GraphExportService {
	return v.value
}

func (v *NullableGraphExportService) Set(val *GraphExportService) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphExportService) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphExportService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphExportService(val *GraphExportService) *NullableGraphExportService {
	return &NullableGraphExportService{value: val, isSet: true}
}

func (v NullableGraphExportService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphExportService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


