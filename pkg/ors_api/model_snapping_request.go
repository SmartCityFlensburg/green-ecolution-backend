/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnappingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnappingRequest{}

// SnappingRequest Snapping service endpoint.
type SnappingRequest struct {
	// The locations to be snapped as array of `longitude/latitude` pairs.
	Locations [][]float64 `json:"locations"`
	ProfileName *string `json:"profileName,omitempty"`
	// Arbitrary identification string of the request reflected in the meta information.
	Id *string `json:"id,omitempty"`
	// Maximum radius in meters around given coordinates to search for graph edges.
	Radius float64 `json:"radius"`
}

type _SnappingRequest SnappingRequest

// NewSnappingRequest instantiates a new SnappingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnappingRequest(locations [][]float64, radius float64) *SnappingRequest {
	this := SnappingRequest{}
	this.Locations = locations
	this.Radius = radius
	return &this
}

// NewSnappingRequestWithDefaults instantiates a new SnappingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnappingRequestWithDefaults() *SnappingRequest {
	this := SnappingRequest{}
	return &this
}

// GetLocations returns the Locations field value
func (o *SnappingRequest) GetLocations() [][]float64 {
	if o == nil {
		var ret [][]float64
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *SnappingRequest) GetLocationsOk() ([][]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *SnappingRequest) SetLocations(v [][]float64) {
	o.Locations = v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *SnappingRequest) GetProfileName() string {
	if o == nil || IsNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnappingRequest) GetProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *SnappingRequest) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *SnappingRequest) SetProfileName(v string) {
	o.ProfileName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SnappingRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnappingRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SnappingRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SnappingRequest) SetId(v string) {
	o.Id = &v
}

// GetRadius returns the Radius field value
func (o *SnappingRequest) GetRadius() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value
// and a boolean to check if the value has been set.
func (o *SnappingRequest) GetRadiusOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Radius, true
}

// SetRadius sets field value
func (o *SnappingRequest) SetRadius(v float64) {
	o.Radius = v
}

func (o SnappingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnappingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locations"] = o.Locations
	if !IsNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["radius"] = o.Radius
	return toSerialize, nil
}

func (o *SnappingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locations",
		"radius",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnappingRequest := _SnappingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnappingRequest)

	if err != nil {
		return err
	}

	*o = SnappingRequest(varSnappingRequest)

	return err
}

type NullableSnappingRequest struct {
	value *SnappingRequest
	isSet bool
}

func (v NullableSnappingRequest) Get() *SnappingRequest {
	return v.value
}

func (v *NullableSnappingRequest) Set(val *SnappingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSnappingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSnappingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnappingRequest(val *SnappingRequest) *NullableSnappingRequest {
	return &NullableSnappingRequest{value: val, isSet: true}
}

func (v NullableSnappingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnappingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


