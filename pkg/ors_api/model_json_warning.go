/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JSONWarning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONWarning{}

// JSONWarning Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments.
type JSONWarning struct {
	// Identification code for the warning
	Code *int32 `json:"code,omitempty"`
	// The message associated with the warning
	Message *string `json:"message,omitempty"`
}

// NewJSONWarning instantiates a new JSONWarning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONWarning() *JSONWarning {
	this := JSONWarning{}
	return &this
}

// NewJSONWarningWithDefaults instantiates a new JSONWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONWarningWithDefaults() *JSONWarning {
	this := JSONWarning{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *JSONWarning) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONWarning) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *JSONWarning) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *JSONWarning) SetCode(v int32) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *JSONWarning) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONWarning) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *JSONWarning) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *JSONWarning) SetMessage(v string) {
	o.Message = &v
}

func (o JSONWarning) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONWarning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableJSONWarning struct {
	value *JSONWarning
	isSet bool
}

func (v NullableJSONWarning) Get() *JSONWarning {
	return v.value
}

func (v *NullableJSONWarning) Set(val *JSONWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONWarning(val *JSONWarning) *NullableJSONWarning {
	return &NullableJSONWarning{value: val, isSet: true}
}

func (v NullableJSONWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


