/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JSONStepManeuver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONStepManeuver{}

// JSONStepManeuver Maneuver object of the step
type JSONStepManeuver struct {
	// The coordinate of the point where a maneuver takes place.
	Location []float64 `json:"location,omitempty"`
	// The azimuth angle (in degrees) of the direction right before the maneuver.
	BearingBefore *int32 `json:"bearing_before,omitempty"`
	// The azimuth angle (in degrees) of the direction right after the maneuver.
	BearingAfter *int32 `json:"bearing_after,omitempty"`
}

// NewJSONStepManeuver instantiates a new JSONStepManeuver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONStepManeuver() *JSONStepManeuver {
	this := JSONStepManeuver{}
	return &this
}

// NewJSONStepManeuverWithDefaults instantiates a new JSONStepManeuver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONStepManeuverWithDefaults() *JSONStepManeuver {
	this := JSONStepManeuver{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *JSONStepManeuver) GetLocation() []float64 {
	if o == nil || IsNil(o.Location) {
		var ret []float64
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStepManeuver) GetLocationOk() ([]float64, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *JSONStepManeuver) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given []float64 and assigns it to the Location field.
func (o *JSONStepManeuver) SetLocation(v []float64) {
	o.Location = v
}

// GetBearingBefore returns the BearingBefore field value if set, zero value otherwise.
func (o *JSONStepManeuver) GetBearingBefore() int32 {
	if o == nil || IsNil(o.BearingBefore) {
		var ret int32
		return ret
	}
	return *o.BearingBefore
}

// GetBearingBeforeOk returns a tuple with the BearingBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStepManeuver) GetBearingBeforeOk() (*int32, bool) {
	if o == nil || IsNil(o.BearingBefore) {
		return nil, false
	}
	return o.BearingBefore, true
}

// HasBearingBefore returns a boolean if a field has been set.
func (o *JSONStepManeuver) HasBearingBefore() bool {
	if o != nil && !IsNil(o.BearingBefore) {
		return true
	}

	return false
}

// SetBearingBefore gets a reference to the given int32 and assigns it to the BearingBefore field.
func (o *JSONStepManeuver) SetBearingBefore(v int32) {
	o.BearingBefore = &v
}

// GetBearingAfter returns the BearingAfter field value if set, zero value otherwise.
func (o *JSONStepManeuver) GetBearingAfter() int32 {
	if o == nil || IsNil(o.BearingAfter) {
		var ret int32
		return ret
	}
	return *o.BearingAfter
}

// GetBearingAfterOk returns a tuple with the BearingAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStepManeuver) GetBearingAfterOk() (*int32, bool) {
	if o == nil || IsNil(o.BearingAfter) {
		return nil, false
	}
	return o.BearingAfter, true
}

// HasBearingAfter returns a boolean if a field has been set.
func (o *JSONStepManeuver) HasBearingAfter() bool {
	if o != nil && !IsNil(o.BearingAfter) {
		return true
	}

	return false
}

// SetBearingAfter gets a reference to the given int32 and assigns it to the BearingAfter field.
func (o *JSONStepManeuver) SetBearingAfter(v int32) {
	o.BearingAfter = &v
}

func (o JSONStepManeuver) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONStepManeuver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.BearingBefore) {
		toSerialize["bearing_before"] = o.BearingBefore
	}
	if !IsNil(o.BearingAfter) {
		toSerialize["bearing_after"] = o.BearingAfter
	}
	return toSerialize, nil
}

type NullableJSONStepManeuver struct {
	value *JSONStepManeuver
	isSet bool
}

func (v NullableJSONStepManeuver) Get() *JSONStepManeuver {
	return v.value
}

func (v *NullableJSONStepManeuver) Set(val *JSONStepManeuver) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONStepManeuver) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONStepManeuver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONStepManeuver(val *JSONStepManeuver) *NullableJSONStepManeuver {
	return &NullableJSONStepManeuver{value: val, isSet: true}
}

func (v NullableJSONStepManeuver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONStepManeuver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


