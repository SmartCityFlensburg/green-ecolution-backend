/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the Restrictions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Restrictions{}

// Restrictions Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed.
type Restrictions struct {
	// Length restriction in metres.
	Length *float32 `json:"length,omitempty"`
	// Width restriction in metres.
	Width *float32 `json:"width,omitempty"`
	// Height restriction in metres. 
	Height *float32 `json:"height,omitempty"`
	// Axleload restriction in tons.
	Axleload *float32 `json:"axleload,omitempty"`
	// Weight restriction in tons. 
	Weight *float32 `json:"weight,omitempty"`
	// Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. 
	Hazmat *bool `json:"hazmat,omitempty"`
	// Specifies the minimum surface type. Default is `sett`. 
	SurfaceType *string `json:"surface_type,omitempty"`
	// Specifies the minimum grade of the route. Default is `grade1`. 
	TrackType *string `json:"track_type,omitempty"`
	// Specifies the minimum smoothness of the route. Default is `good`.
	SmoothnessType *string `json:"smoothness_type,omitempty"`
	// Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.
	MaximumSlopedKerb *float32 `json:"maximum_sloped_kerb,omitempty"`
	// Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.
	MaximumIncline *int32 `json:"maximum_incline,omitempty"`
	// Specifies the minimum width of the footway in metres.
	MinimumWidth *float32 `json:"minimum_width,omitempty"`
}

// NewRestrictions instantiates a new Restrictions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictions() *Restrictions {
	this := Restrictions{}
	var hazmat bool = false
	this.Hazmat = &hazmat
	var surfaceType string = "sett"
	this.SurfaceType = &surfaceType
	var trackType string = "grade1"
	this.TrackType = &trackType
	var smoothnessType string = "good"
	this.SmoothnessType = &smoothnessType
	var maximumSlopedKerb float32 = 0.6
	this.MaximumSlopedKerb = &maximumSlopedKerb
	var maximumIncline int32 = 6
	this.MaximumIncline = &maximumIncline
	return &this
}

// NewRestrictionsWithDefaults instantiates a new Restrictions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictionsWithDefaults() *Restrictions {
	this := Restrictions{}
	var hazmat bool = false
	this.Hazmat = &hazmat
	var surfaceType string = "sett"
	this.SurfaceType = &surfaceType
	var trackType string = "grade1"
	this.TrackType = &trackType
	var smoothnessType string = "good"
	this.SmoothnessType = &smoothnessType
	var maximumSlopedKerb float32 = 0.6
	this.MaximumSlopedKerb = &maximumSlopedKerb
	var maximumIncline int32 = 6
	this.MaximumIncline = &maximumIncline
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *Restrictions) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *Restrictions) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *Restrictions) SetLength(v float32) {
	o.Length = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *Restrictions) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *Restrictions) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *Restrictions) SetWidth(v float32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *Restrictions) GetHeight() float32 {
	if o == nil || IsNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *Restrictions) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *Restrictions) SetHeight(v float32) {
	o.Height = &v
}

// GetAxleload returns the Axleload field value if set, zero value otherwise.
func (o *Restrictions) GetAxleload() float32 {
	if o == nil || IsNil(o.Axleload) {
		var ret float32
		return ret
	}
	return *o.Axleload
}

// GetAxleloadOk returns a tuple with the Axleload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetAxleloadOk() (*float32, bool) {
	if o == nil || IsNil(o.Axleload) {
		return nil, false
	}
	return o.Axleload, true
}

// HasAxleload returns a boolean if a field has been set.
func (o *Restrictions) HasAxleload() bool {
	if o != nil && !IsNil(o.Axleload) {
		return true
	}

	return false
}

// SetAxleload gets a reference to the given float32 and assigns it to the Axleload field.
func (o *Restrictions) SetAxleload(v float32) {
	o.Axleload = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *Restrictions) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *Restrictions) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *Restrictions) SetWeight(v float32) {
	o.Weight = &v
}

// GetHazmat returns the Hazmat field value if set, zero value otherwise.
func (o *Restrictions) GetHazmat() bool {
	if o == nil || IsNil(o.Hazmat) {
		var ret bool
		return ret
	}
	return *o.Hazmat
}

// GetHazmatOk returns a tuple with the Hazmat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetHazmatOk() (*bool, bool) {
	if o == nil || IsNil(o.Hazmat) {
		return nil, false
	}
	return o.Hazmat, true
}

// HasHazmat returns a boolean if a field has been set.
func (o *Restrictions) HasHazmat() bool {
	if o != nil && !IsNil(o.Hazmat) {
		return true
	}

	return false
}

// SetHazmat gets a reference to the given bool and assigns it to the Hazmat field.
func (o *Restrictions) SetHazmat(v bool) {
	o.Hazmat = &v
}

// GetSurfaceType returns the SurfaceType field value if set, zero value otherwise.
func (o *Restrictions) GetSurfaceType() string {
	if o == nil || IsNil(o.SurfaceType) {
		var ret string
		return ret
	}
	return *o.SurfaceType
}

// GetSurfaceTypeOk returns a tuple with the SurfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetSurfaceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SurfaceType) {
		return nil, false
	}
	return o.SurfaceType, true
}

// HasSurfaceType returns a boolean if a field has been set.
func (o *Restrictions) HasSurfaceType() bool {
	if o != nil && !IsNil(o.SurfaceType) {
		return true
	}

	return false
}

// SetSurfaceType gets a reference to the given string and assigns it to the SurfaceType field.
func (o *Restrictions) SetSurfaceType(v string) {
	o.SurfaceType = &v
}

// GetTrackType returns the TrackType field value if set, zero value otherwise.
func (o *Restrictions) GetTrackType() string {
	if o == nil || IsNil(o.TrackType) {
		var ret string
		return ret
	}
	return *o.TrackType
}

// GetTrackTypeOk returns a tuple with the TrackType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetTrackTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TrackType) {
		return nil, false
	}
	return o.TrackType, true
}

// HasTrackType returns a boolean if a field has been set.
func (o *Restrictions) HasTrackType() bool {
	if o != nil && !IsNil(o.TrackType) {
		return true
	}

	return false
}

// SetTrackType gets a reference to the given string and assigns it to the TrackType field.
func (o *Restrictions) SetTrackType(v string) {
	o.TrackType = &v
}

// GetSmoothnessType returns the SmoothnessType field value if set, zero value otherwise.
func (o *Restrictions) GetSmoothnessType() string {
	if o == nil || IsNil(o.SmoothnessType) {
		var ret string
		return ret
	}
	return *o.SmoothnessType
}

// GetSmoothnessTypeOk returns a tuple with the SmoothnessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetSmoothnessTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SmoothnessType) {
		return nil, false
	}
	return o.SmoothnessType, true
}

// HasSmoothnessType returns a boolean if a field has been set.
func (o *Restrictions) HasSmoothnessType() bool {
	if o != nil && !IsNil(o.SmoothnessType) {
		return true
	}

	return false
}

// SetSmoothnessType gets a reference to the given string and assigns it to the SmoothnessType field.
func (o *Restrictions) SetSmoothnessType(v string) {
	o.SmoothnessType = &v
}

// GetMaximumSlopedKerb returns the MaximumSlopedKerb field value if set, zero value otherwise.
func (o *Restrictions) GetMaximumSlopedKerb() float32 {
	if o == nil || IsNil(o.MaximumSlopedKerb) {
		var ret float32
		return ret
	}
	return *o.MaximumSlopedKerb
}

// GetMaximumSlopedKerbOk returns a tuple with the MaximumSlopedKerb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetMaximumSlopedKerbOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumSlopedKerb) {
		return nil, false
	}
	return o.MaximumSlopedKerb, true
}

// HasMaximumSlopedKerb returns a boolean if a field has been set.
func (o *Restrictions) HasMaximumSlopedKerb() bool {
	if o != nil && !IsNil(o.MaximumSlopedKerb) {
		return true
	}

	return false
}

// SetMaximumSlopedKerb gets a reference to the given float32 and assigns it to the MaximumSlopedKerb field.
func (o *Restrictions) SetMaximumSlopedKerb(v float32) {
	o.MaximumSlopedKerb = &v
}

// GetMaximumIncline returns the MaximumIncline field value if set, zero value otherwise.
func (o *Restrictions) GetMaximumIncline() int32 {
	if o == nil || IsNil(o.MaximumIncline) {
		var ret int32
		return ret
	}
	return *o.MaximumIncline
}

// GetMaximumInclineOk returns a tuple with the MaximumIncline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetMaximumInclineOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumIncline) {
		return nil, false
	}
	return o.MaximumIncline, true
}

// HasMaximumIncline returns a boolean if a field has been set.
func (o *Restrictions) HasMaximumIncline() bool {
	if o != nil && !IsNil(o.MaximumIncline) {
		return true
	}

	return false
}

// SetMaximumIncline gets a reference to the given int32 and assigns it to the MaximumIncline field.
func (o *Restrictions) SetMaximumIncline(v int32) {
	o.MaximumIncline = &v
}

// GetMinimumWidth returns the MinimumWidth field value if set, zero value otherwise.
func (o *Restrictions) GetMinimumWidth() float32 {
	if o == nil || IsNil(o.MinimumWidth) {
		var ret float32
		return ret
	}
	return *o.MinimumWidth
}

// GetMinimumWidthOk returns a tuple with the MinimumWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetMinimumWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.MinimumWidth) {
		return nil, false
	}
	return o.MinimumWidth, true
}

// HasMinimumWidth returns a boolean if a field has been set.
func (o *Restrictions) HasMinimumWidth() bool {
	if o != nil && !IsNil(o.MinimumWidth) {
		return true
	}

	return false
}

// SetMinimumWidth gets a reference to the given float32 and assigns it to the MinimumWidth field.
func (o *Restrictions) SetMinimumWidth(v float32) {
	o.MinimumWidth = &v
}

func (o Restrictions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Restrictions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Axleload) {
		toSerialize["axleload"] = o.Axleload
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.Hazmat) {
		toSerialize["hazmat"] = o.Hazmat
	}
	if !IsNil(o.SurfaceType) {
		toSerialize["surface_type"] = o.SurfaceType
	}
	if !IsNil(o.TrackType) {
		toSerialize["track_type"] = o.TrackType
	}
	if !IsNil(o.SmoothnessType) {
		toSerialize["smoothness_type"] = o.SmoothnessType
	}
	if !IsNil(o.MaximumSlopedKerb) {
		toSerialize["maximum_sloped_kerb"] = o.MaximumSlopedKerb
	}
	if !IsNil(o.MaximumIncline) {
		toSerialize["maximum_incline"] = o.MaximumIncline
	}
	if !IsNil(o.MinimumWidth) {
		toSerialize["minimum_width"] = o.MinimumWidth
	}
	return toSerialize, nil
}

type NullableRestrictions struct {
	value *Restrictions
	isSet bool
}

func (v NullableRestrictions) Get() *Restrictions {
	return v.value
}

func (v *NullableRestrictions) Set(val *Restrictions) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictions) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictions(val *Restrictions) *NullableRestrictions {
	return &NullableRestrictions{value: val, isSet: true}
}

func (v NullableRestrictions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


