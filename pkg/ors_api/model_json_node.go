/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JsonNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonNode{}

// JsonNode struct for JsonNode
type JsonNode struct {
	// Id of the corresponding node in the graph
	NodeId *int32 `json:"nodeId,omitempty"`
	// {longitude},{latitude} coordinates of the closest accessible point on the routing graph
	Location []float64 `json:"location,omitempty"`
}

// NewJsonNode instantiates a new JsonNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonNode() *JsonNode {
	this := JsonNode{}
	return &this
}

// NewJsonNodeWithDefaults instantiates a new JsonNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonNodeWithDefaults() *JsonNode {
	this := JsonNode{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *JsonNode) GetNodeId() int32 {
	if o == nil || IsNil(o.NodeId) {
		var ret int32
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetNodeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *JsonNode) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given int32 and assigns it to the NodeId field.
func (o *JsonNode) SetNodeId(v int32) {
	o.NodeId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *JsonNode) GetLocation() []float64 {
	if o == nil || IsNil(o.Location) {
		var ret []float64
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetLocationOk() ([]float64, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *JsonNode) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given []float64 and assigns it to the Location field.
func (o *JsonNode) SetLocation(v []float64) {
	o.Location = v
}

func (o JsonNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return toSerialize, nil
}

type NullableJsonNode struct {
	value *JsonNode
	isSet bool
}

func (v NullableJsonNode) Get() *JsonNode {
	return v.value
}

func (v *NullableJsonNode) Set(val *JsonNode) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonNode) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonNode(val *JsonNode) *NullableJsonNode {
	return &NullableJsonNode{value: val, isSet: true}
}

func (v NullableJsonNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


