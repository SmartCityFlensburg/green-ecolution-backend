/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
	"time"
)

// checks if the JSONIndividualRouteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONIndividualRouteResponse{}

// JSONIndividualRouteResponse An individual JSON based route created by the service
type JSONIndividualRouteResponse struct {
	Summary *JSONSummary `json:"summary,omitempty"`
	// List containing the segments and its corresponding steps which make up the route.
	Segments []JSONSegment `json:"segments,omitempty"`
	// A bounding box which contains the entire route
	Bbox []float64 `json:"bbox,omitempty"`
	// The geometry of the route. For JSON route responses this is an encoded polyline.
	Geometry *string `json:"geometry,omitempty"`
	// List containing the indices of way points corresponding to the *geometry*.
	WayPoints []int32 `json:"way_points,omitempty"`
	// List of warnings that have been generated for the route
	Warnings []JSONWarning `json:"warnings,omitempty"`
	// List containing the legs the route consists of.
	Legs []JSONLeg `json:"legs,omitempty"`
	// List of extra info objects representing the extra info items that were requested for the route.
	Extras *map[string]JSONExtra `json:"extras,omitempty"`
	// Departure date and time
	Departure *time.Time `json:"departure,omitempty"`
	// Arrival date and time
	Arrival *time.Time `json:"arrival,omitempty"`
}

// NewJSONIndividualRouteResponse instantiates a new JSONIndividualRouteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONIndividualRouteResponse() *JSONIndividualRouteResponse {
	this := JSONIndividualRouteResponse{}
	return &this
}

// NewJSONIndividualRouteResponseWithDefaults instantiates a new JSONIndividualRouteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONIndividualRouteResponseWithDefaults() *JSONIndividualRouteResponse {
	this := JSONIndividualRouteResponse{}
	return &this
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetSummary() JSONSummary {
	if o == nil || IsNil(o.Summary) {
		var ret JSONSummary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetSummaryOk() (*JSONSummary, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given JSONSummary and assigns it to the Summary field.
func (o *JSONIndividualRouteResponse) SetSummary(v JSONSummary) {
	o.Summary = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetSegments() []JSONSegment {
	if o == nil || IsNil(o.Segments) {
		var ret []JSONSegment
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetSegmentsOk() ([]JSONSegment, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []JSONSegment and assigns it to the Segments field.
func (o *JSONIndividualRouteResponse) SetSegments(v []JSONSegment) {
	o.Segments = v
}

// GetBbox returns the Bbox field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetBbox() []float64 {
	if o == nil || IsNil(o.Bbox) {
		var ret []float64
		return ret
	}
	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetBboxOk() ([]float64, bool) {
	if o == nil || IsNil(o.Bbox) {
		return nil, false
	}
	return o.Bbox, true
}

// HasBbox returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasBbox() bool {
	if o != nil && !IsNil(o.Bbox) {
		return true
	}

	return false
}

// SetBbox gets a reference to the given []float64 and assigns it to the Bbox field.
func (o *JSONIndividualRouteResponse) SetBbox(v []float64) {
	o.Bbox = v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetGeometry() string {
	if o == nil || IsNil(o.Geometry) {
		var ret string
		return ret
	}
	return *o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetGeometryOk() (*string, bool) {
	if o == nil || IsNil(o.Geometry) {
		return nil, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given string and assigns it to the Geometry field.
func (o *JSONIndividualRouteResponse) SetGeometry(v string) {
	o.Geometry = &v
}

// GetWayPoints returns the WayPoints field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetWayPoints() []int32 {
	if o == nil || IsNil(o.WayPoints) {
		var ret []int32
		return ret
	}
	return o.WayPoints
}

// GetWayPointsOk returns a tuple with the WayPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetWayPointsOk() ([]int32, bool) {
	if o == nil || IsNil(o.WayPoints) {
		return nil, false
	}
	return o.WayPoints, true
}

// HasWayPoints returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasWayPoints() bool {
	if o != nil && !IsNil(o.WayPoints) {
		return true
	}

	return false
}

// SetWayPoints gets a reference to the given []int32 and assigns it to the WayPoints field.
func (o *JSONIndividualRouteResponse) SetWayPoints(v []int32) {
	o.WayPoints = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetWarnings() []JSONWarning {
	if o == nil || IsNil(o.Warnings) {
		var ret []JSONWarning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetWarningsOk() ([]JSONWarning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []JSONWarning and assigns it to the Warnings field.
func (o *JSONIndividualRouteResponse) SetWarnings(v []JSONWarning) {
	o.Warnings = v
}

// GetLegs returns the Legs field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetLegs() []JSONLeg {
	if o == nil || IsNil(o.Legs) {
		var ret []JSONLeg
		return ret
	}
	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetLegsOk() ([]JSONLeg, bool) {
	if o == nil || IsNil(o.Legs) {
		return nil, false
	}
	return o.Legs, true
}

// HasLegs returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasLegs() bool {
	if o != nil && !IsNil(o.Legs) {
		return true
	}

	return false
}

// SetLegs gets a reference to the given []JSONLeg and assigns it to the Legs field.
func (o *JSONIndividualRouteResponse) SetLegs(v []JSONLeg) {
	o.Legs = v
}

// GetExtras returns the Extras field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetExtras() map[string]JSONExtra {
	if o == nil || IsNil(o.Extras) {
		var ret map[string]JSONExtra
		return ret
	}
	return *o.Extras
}

// GetExtrasOk returns a tuple with the Extras field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetExtrasOk() (*map[string]JSONExtra, bool) {
	if o == nil || IsNil(o.Extras) {
		return nil, false
	}
	return o.Extras, true
}

// HasExtras returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasExtras() bool {
	if o != nil && !IsNil(o.Extras) {
		return true
	}

	return false
}

// SetExtras gets a reference to the given map[string]JSONExtra and assigns it to the Extras field.
func (o *JSONIndividualRouteResponse) SetExtras(v map[string]JSONExtra) {
	o.Extras = &v
}

// GetDeparture returns the Departure field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetDeparture() time.Time {
	if o == nil || IsNil(o.Departure) {
		var ret time.Time
		return ret
	}
	return *o.Departure
}

// GetDepartureOk returns a tuple with the Departure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetDepartureOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Departure) {
		return nil, false
	}
	return o.Departure, true
}

// HasDeparture returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasDeparture() bool {
	if o != nil && !IsNil(o.Departure) {
		return true
	}

	return false
}

// SetDeparture gets a reference to the given time.Time and assigns it to the Departure field.
func (o *JSONIndividualRouteResponse) SetDeparture(v time.Time) {
	o.Departure = &v
}

// GetArrival returns the Arrival field value if set, zero value otherwise.
func (o *JSONIndividualRouteResponse) GetArrival() time.Time {
	if o == nil || IsNil(o.Arrival) {
		var ret time.Time
		return ret
	}
	return *o.Arrival
}

// GetArrivalOk returns a tuple with the Arrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONIndividualRouteResponse) GetArrivalOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Arrival) {
		return nil, false
	}
	return o.Arrival, true
}

// HasArrival returns a boolean if a field has been set.
func (o *JSONIndividualRouteResponse) HasArrival() bool {
	if o != nil && !IsNil(o.Arrival) {
		return true
	}

	return false
}

// SetArrival gets a reference to the given time.Time and assigns it to the Arrival field.
func (o *JSONIndividualRouteResponse) SetArrival(v time.Time) {
	o.Arrival = &v
}

func (o JSONIndividualRouteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONIndividualRouteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !IsNil(o.Bbox) {
		toSerialize["bbox"] = o.Bbox
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.WayPoints) {
		toSerialize["way_points"] = o.WayPoints
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	if !IsNil(o.Legs) {
		toSerialize["legs"] = o.Legs
	}
	if !IsNil(o.Extras) {
		toSerialize["extras"] = o.Extras
	}
	if !IsNil(o.Departure) {
		toSerialize["departure"] = o.Departure
	}
	if !IsNil(o.Arrival) {
		toSerialize["arrival"] = o.Arrival
	}
	return toSerialize, nil
}

type NullableJSONIndividualRouteResponse struct {
	value *JSONIndividualRouteResponse
	isSet bool
}

func (v NullableJSONIndividualRouteResponse) Get() *JSONIndividualRouteResponse {
	return v.value
}

func (v *NullableJSONIndividualRouteResponse) Set(val *JSONIndividualRouteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONIndividualRouteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONIndividualRouteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONIndividualRouteResponse(val *JSONIndividualRouteResponse) *NullableJSONIndividualRouteResponse {
	return &NullableJSONIndividualRouteResponse{value: val, isSet: true}
}

func (v NullableJSONIndividualRouteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONIndividualRouteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


