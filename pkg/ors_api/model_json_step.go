/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JSONStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONStep{}

// JSONStep Step of a route segment
type JSONStep struct {
	// The distance for the step in metres.
	Distance *float64 `json:"distance,omitempty"`
	// The duration for the step in seconds.
	Duration *float64 `json:"duration,omitempty"`
	// The [instruction](https://giscience.github.io/openrouteservice/api-reference/endpoints/directions/instruction-types) action for symbolisation purposes.
	Type *int32 `json:"type,omitempty"`
	// The routing instruction text for the step.
	Instruction *string `json:"instruction,omitempty"`
	// The name of the next street.
	Name *string `json:"name,omitempty"`
	// Only for roundabouts. Contains the number of the exit to take.
	ExitNumber *int32 `json:"exit_number,omitempty"`
	// Contains the bearing of the entrance and all passed exits in a roundabout.
	ExitBearings []int32 `json:"exit_bearings,omitempty"`
	// List containing the indices of the steps start- and endpoint corresponding to the *geometry*.
	WayPoints []int32 `json:"way_points,omitempty"`
	Maneuver *JSONStepManeuver `json:"maneuver,omitempty"`
}

// NewJSONStep instantiates a new JSONStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONStep() *JSONStep {
	this := JSONStep{}
	return &this
}

// NewJSONStepWithDefaults instantiates a new JSONStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONStepWithDefaults() *JSONStep {
	this := JSONStep{}
	return &this
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *JSONStep) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *JSONStep) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *JSONStep) SetDistance(v float64) {
	o.Distance = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *JSONStep) GetDuration() float64 {
	if o == nil || IsNil(o.Duration) {
		var ret float64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetDurationOk() (*float64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *JSONStep) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float64 and assigns it to the Duration field.
func (o *JSONStep) SetDuration(v float64) {
	o.Duration = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JSONStep) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JSONStep) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *JSONStep) SetType(v int32) {
	o.Type = &v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *JSONStep) GetInstruction() string {
	if o == nil || IsNil(o.Instruction) {
		var ret string
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.Instruction) {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *JSONStep) HasInstruction() bool {
	if o != nil && !IsNil(o.Instruction) {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given string and assigns it to the Instruction field.
func (o *JSONStep) SetInstruction(v string) {
	o.Instruction = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JSONStep) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JSONStep) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JSONStep) SetName(v string) {
	o.Name = &v
}

// GetExitNumber returns the ExitNumber field value if set, zero value otherwise.
func (o *JSONStep) GetExitNumber() int32 {
	if o == nil || IsNil(o.ExitNumber) {
		var ret int32
		return ret
	}
	return *o.ExitNumber
}

// GetExitNumberOk returns a tuple with the ExitNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetExitNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.ExitNumber) {
		return nil, false
	}
	return o.ExitNumber, true
}

// HasExitNumber returns a boolean if a field has been set.
func (o *JSONStep) HasExitNumber() bool {
	if o != nil && !IsNil(o.ExitNumber) {
		return true
	}

	return false
}

// SetExitNumber gets a reference to the given int32 and assigns it to the ExitNumber field.
func (o *JSONStep) SetExitNumber(v int32) {
	o.ExitNumber = &v
}

// GetExitBearings returns the ExitBearings field value if set, zero value otherwise.
func (o *JSONStep) GetExitBearings() []int32 {
	if o == nil || IsNil(o.ExitBearings) {
		var ret []int32
		return ret
	}
	return o.ExitBearings
}

// GetExitBearingsOk returns a tuple with the ExitBearings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetExitBearingsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExitBearings) {
		return nil, false
	}
	return o.ExitBearings, true
}

// HasExitBearings returns a boolean if a field has been set.
func (o *JSONStep) HasExitBearings() bool {
	if o != nil && !IsNil(o.ExitBearings) {
		return true
	}

	return false
}

// SetExitBearings gets a reference to the given []int32 and assigns it to the ExitBearings field.
func (o *JSONStep) SetExitBearings(v []int32) {
	o.ExitBearings = v
}

// GetWayPoints returns the WayPoints field value if set, zero value otherwise.
func (o *JSONStep) GetWayPoints() []int32 {
	if o == nil || IsNil(o.WayPoints) {
		var ret []int32
		return ret
	}
	return o.WayPoints
}

// GetWayPointsOk returns a tuple with the WayPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetWayPointsOk() ([]int32, bool) {
	if o == nil || IsNil(o.WayPoints) {
		return nil, false
	}
	return o.WayPoints, true
}

// HasWayPoints returns a boolean if a field has been set.
func (o *JSONStep) HasWayPoints() bool {
	if o != nil && !IsNil(o.WayPoints) {
		return true
	}

	return false
}

// SetWayPoints gets a reference to the given []int32 and assigns it to the WayPoints field.
func (o *JSONStep) SetWayPoints(v []int32) {
	o.WayPoints = v
}

// GetManeuver returns the Maneuver field value if set, zero value otherwise.
func (o *JSONStep) GetManeuver() JSONStepManeuver {
	if o == nil || IsNil(o.Maneuver) {
		var ret JSONStepManeuver
		return ret
	}
	return *o.Maneuver
}

// GetManeuverOk returns a tuple with the Maneuver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONStep) GetManeuverOk() (*JSONStepManeuver, bool) {
	if o == nil || IsNil(o.Maneuver) {
		return nil, false
	}
	return o.Maneuver, true
}

// HasManeuver returns a boolean if a field has been set.
func (o *JSONStep) HasManeuver() bool {
	if o != nil && !IsNil(o.Maneuver) {
		return true
	}

	return false
}

// SetManeuver gets a reference to the given JSONStepManeuver and assigns it to the Maneuver field.
func (o *JSONStep) SetManeuver(v JSONStepManeuver) {
	o.Maneuver = &v
}

func (o JSONStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Instruction) {
		toSerialize["instruction"] = o.Instruction
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExitNumber) {
		toSerialize["exit_number"] = o.ExitNumber
	}
	if !IsNil(o.ExitBearings) {
		toSerialize["exit_bearings"] = o.ExitBearings
	}
	if !IsNil(o.WayPoints) {
		toSerialize["way_points"] = o.WayPoints
	}
	if !IsNil(o.Maneuver) {
		toSerialize["maneuver"] = o.Maneuver
	}
	return toSerialize, nil
}

type NullableJSONStep struct {
	value *JSONStep
	isSet bool
}

func (v NullableJSONStep) Get() *JSONStep {
	return v.value
}

func (v *NullableJSONStep) Set(val *JSONStep) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONStep) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONStep(val *JSONStep) *NullableJSONStep {
	return &NullableJSONStep{value: val, isSet: true}
}

func (v NullableJSONStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


