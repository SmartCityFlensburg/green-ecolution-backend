{
  "openapi": "3.0.1",
  "info": {
    "title": "Openrouteservice",
    "description": "This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).",
    "contact": {
      "name": "Openrouteservice",
      "url": "https://github.com/GIScience/openrouteservice",
      "email": "support@smartmobility.heigit.org"
    },
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://github.com/GIScience/openrouteservice/blob/main/LICENSE"
    },
    "version": "v2",
    "x-ors-version": "9.0.0"
  },
  "servers": [
    {
      "url": "https://api.openrouteservice.org",
      "description": "Openrouteservice API"
    },
    {
      "url": "http://localhost:{port}{basePath}",
      "description": "Development Server",
      "variables": {
        "port": {
          "description": "Port the local openrouteservice instance runs on",
          "default": "8082"
        },
        "basePath": {
          "description": "Base path of the local openrouteservice instance",
          "default": "/ors"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Status service",
      "description": "Get information on the status of the api"
    },
    {
      "name": "Directions Service",
      "description": "Get directions for different modes of transport"
    },
    {
      "name": "Export Service",
      "description": "Export the base graph for different modes of transport"
    },
    {
      "name": "Health service",
      "description": "Get information on the health of the api"
    },
    {
      "name": "Isochrones Service",
      "description": "Obtain areas of reachability from given locations"
    },
    {
      "name": "Snapping Service",
      "description": "Snap coordinates to the road network."
    },
    {
      "name": "Matrix Service",
      "description": "Obtain one-to-many, many-to-one and many-to-many matrices for time and distance"
    }
  ],
  "paths": {
    "/v2/snap/{profile}": {
      "post": {
        "tags": [
          "Snapping Service"
        ],
        "summary": "Snapping Service",
        "description": "Returns a list of points snapped to the nearest edge in the routing graph. In case an appropriate\nsnapping point cannot be found within the specified search radius, \"null\" is returned.\n",
        "operationId": "getDefault",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnappingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnappingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/snap/{profile}/json": {
      "post": {
        "tags": [
          "Snapping Service"
        ],
        "summary": "Snapping Service JSON",
        "description": "Returns a list of points snapped to the nearest edge in the routing graph. In case an appropriate\nsnapping point cannot be found within the specified search radius, \"null\" is returned.\n",
        "operationId": "getJsonSnapping",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnappingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "JSON Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnappingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/snap/{profile}/geojson": {
      "post": {
        "tags": [
          "Snapping Service"
        ],
        "summary": "Snapping Service GeoJSON",
        "description": "Returns a GeoJSON FeatureCollection of points snapped to the nearest edge in the routing graph.\nIn case an appropriate snapping point cannot be found within the specified search radius,\nit is omitted from the features array. The features provide the 'source_id' property, to match\nthe results with the input location array (IDs start at 0).\n",
        "operationId": "getGeoJSONSnapping",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnappingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "GeoJSON Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoJSONSnappingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/matrix/{profile}": {
      "post": {
        "tags": [
          "Matrix Service"
        ],
        "summary": "Matrix Service",
        "description": "Returns duration or distance matrix for multiple source and destination points.\nBy default a square duration matrix is returned where every point in locations is paired with each other. The result is null if a value can’t be determined.",
        "operationId": "getDefault_1",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the matrix profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatrixRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns JSON.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/MatrixResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/isochrones/{profile}": {
      "post": {
        "tags": [
          "Isochrones Service"
        ],
        "summary": "Isochrones Service",
        "description": "The Isochrone Service supports time and distance analyses for one single or multiple locations.\nYou may also specify the isochrone interval or provide multiple exact isochrone range values.\nThis service allows the same range of profile options as the /directions endpoint,\nwhich help you to further customize your request to obtain a more detailed reachability area response.",
        "operationId": "getDefaultIsochrones",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IsochronesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns GeoJSON.",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoJSONIsochronesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/export/{profile}": {
      "post": {
        "tags": [
          "Export Service"
        ],
        "summary": "Export Service",
        "description": "Returns a list of points, edges and weights within a given bounding box for a selected profile as JSON. This method does not accept any request body or parameters other than profile, start coordinate, and end coordinate.",
        "operationId": "getDefault_2",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/graphExportService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns JSON.",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonExportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/export/{profile}/json": {
      "post": {
        "tags": [
          "Export Service"
        ],
        "summary": "Export Service JSON",
        "description": "Returns a list of points, edges and weights within a given bounding box for a selected profile JSON.",
        "operationId": "getJsonExport",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/graphExportService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "JSON Response.",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonExportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/directions/{profile}": {
      "get": {
        "tags": [
          "Directions Service"
        ],
        "summary": "Directions Service",
        "description": "Get a basic route between two points with the profile provided. Returned response is in GeoJSON format. This method does not accept any request body or parameters other than profile, start coordinate, and end coordinate.",
        "operationId": "getSimpleGeoJsonRoute",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start coordinate of the route in `longitude,latitude` format.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8.681495,49.41461"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Destination coordinate of the route in `longitude,latitude` format.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8.687872,49.420318"
          }
        ],
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns GeoJSON. The decoded values of the extra information can be found [here](https://giscience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/).",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoJSONRouteResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Directions Service"
        ],
        "summary": "Directions Service",
        "description": "Returns a route between two or more locations for a selected profile and its settings as JSON",
        "operationId": "getDefault_3",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/directionsService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns JSON. The decoded values of the extra information can be found [here](https://giscience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONRouteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/directions/{profile}/json": {
      "post": {
        "tags": [
          "Directions Service"
        ],
        "summary": "Directions Service JSON",
        "description": "Returns a route between two or more locations for a selected profile and its settings as JSON",
        "operationId": "getJsonRoute",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/directionsService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "JSON Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONRouteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/directions/{profile}/gpx": {
      "post": {
        "tags": [
          "Directions Service"
        ],
        "summary": "Directions Service GPX",
        "description": "Returns a route between two or more locations for a selected profile and its settings as GPX. The schema can be found [here](https://raw.githubusercontent.com/GIScience/openrouteservice-schema/main/gpx/v1/ors-gpx.xsd)",
        "operationId": "getGPXRoute",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/directionsService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns GPX.",
            "content": {
              "application/gpx+xml": {
                "schema": {
                  "$ref": "#/components/schemas/gpx"
                }
              }
            }
          }
        }
      }
    },
    "/v2/directions/{profile}/geojson": {
      "post": {
        "tags": [
          "Directions Service"
        ],
        "summary": "Directions Service GeoJSON",
        "description": "Returns a route between two or more locations for a selected profile and its settings as GeoJSON",
        "operationId": "getGeoJsonRoute",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "description": "Specifies the route profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "driving-car"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/directionsService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "An unexpected error was encountered and a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "An element could not be found. If possible, a more detailed error code is provided.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "Indicates that the server does not support the functionality needed to fulfill the request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unavailable due to overload or maintenance.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "405": {
            "description": "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request is incorrect and therefore can not be processed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "Standard response for successfully processed requests. Returns GeoJSON. The decoded values of the extra information can be found [here](https://giscience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/).",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoJSONRouteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/status": {
      "get": {
        "tags": [
          "Status service"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v2/health": {
      "get": {
        "tags": [
          "Health service"
        ],
        "operationId": "fetchHealth",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SnappingRequest": {
        "required": [
          "locations",
          "radius"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
            "example": [
              [8.669629, 49.413025],
              [8.675841, 49.418532],
              [8.665144, 49.415594]
            ],
            "items": {
              "type": "array",
              "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
              "example": [
                [8.669629, 49.413025],
                [8.675841, 49.418532],
                [8.665144, 49.415594]
              ],
              "items": {
                "type": "number",
                "description": "The locations to be snapped as array of `longitude/latitude` pairs.",
                "format": "double"
              }
            }
          },
          "profileName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request"
          },
          "radius": {
            "type": "number",
            "description": "Maximum radius in meters around given coordinates to search for graph edges.",
            "format": "double",
            "example": 350
          }
        },
        "description": "Snapping service endpoint."
      },
      "EngineInfo": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The backend version of the openrouteservice that was queried",
            "example": "8.0"
          },
          "build_date": {
            "type": "string",
            "description": "The date that the service was last updated",
            "example": "2019-02-07T14:28:11Z"
          },
          "graph_date": {
            "type": "string",
            "description": "The date that the graph data was last updated",
            "example": "2019-02-07T14:28:11Z"
          }
        },
        "description": "Information about the openrouteservice engine used"
      },
      "JSONLocation": {
        "type": "object",
        "properties": {
          "location": {
            "type": "array",
            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
            "example": [8.678962, 49.40783],
            "items": {
              "type": "number",
              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
              "format": "double"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
            "example": "Bergheimer Straße",
            "x-validWhen": {
              "ref": "resolve_locations",
              "value": true
            }
          },
          "snapped_distance": {
            "type": "number",
            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
            "format": "double",
            "example": 1.2
          }
        },
        "description": "The snapped locations as coordinates and snapping distance."
      },
      "SnappingResponse": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "description": "The snapped locations as coordinates and snapping distance.",
            "items": {
              "$ref": "#/components/schemas/JSONLocation"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/SnappingResponseInfo"
          }
        },
        "description": "The Snapping Response contains the snapped coordinates."
      },
      "SnappingResponseInfo": {
        "type": "object",
        "properties": {
          "attribution": {
            "type": "string",
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org | OpenStreetMap contributors"
          },
          "service": {
            "type": "string",
            "description": "The service that was requested",
            "example": "snap"
          },
          "timestamp": {
            "type": "integer",
            "description": "Time that the request was made (UNIX Epoch time)",
            "format": "int64",
            "example": 1549549847974
          },
          "query": {
            "$ref": "#/components/schemas/SnappingRequest"
          },
          "engine": {
            "$ref": "#/components/schemas/EngineInfo"
          },
          "system_message": {
            "type": "string",
            "description": "System message",
            "example": "A message string configured in the service"
          }
        },
        "description": "Information about the request"
      },
      "GeoJSONFeature": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "GeoJSON type",
            "default": "Feature"
          },
          "properties": {
            "$ref": "#/components/schemas/GeoJSONFeatureProperties"
          },
          "geometry": {
            "$ref": "#/components/schemas/GeoJSONPointGeometry"
          }
        },
        "description": "Information about the service and request"
      },
      "GeoJSONFeatureProperties": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "\"Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.",
            "example": "Gerhart-Hauptmann-Straße",
            "x-validWhen": {
              "ref": "resolve_locations",
              "value": true
            }
          },
          "snapped_distance": {
            "type": "number",
            "description": "Distance between the `source/destination` Location and the used point on the routing graph in meters.",
            "format": "double",
            "example": 0.02
          },
          "source_id": {
            "type": "integer",
            "description": "Index of the requested location",
            "format": "int32"
          }
        },
        "description": "Feature properties"
      },
      "GeoJSONPointGeometry": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "GeoJSON type",
            "default": "Point"
          },
          "coordinates": {
            "type": "array",
            "description": "Lon/Lat coordinates of the snapped location",
            "example": [8.681495, 49.41461],
            "items": {
              "type": "number",
              "description": "Lon/Lat coordinates of the snapped location",
              "format": "double"
            }
          }
        },
        "description": "Feature geometry"
      },
      "GeoJSONSnappingResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "GeoJSON type",
            "default": "FeatureCollection"
          },
          "features": {
            "type": "array",
            "description": "Information about the service and request",
            "items": {
              "$ref": "#/components/schemas/GeoJSONFeature"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/SnappingResponseInfo"
          },
          "bbox": {
            "type": "array",
            "description": "Bounding box that covers all returned snapping points",
            "example": [49.414057, 8.680894, 49.420514, 8.690123],
            "items": {
              "type": "number",
              "description": "Bounding box that covers all returned snapping points",
              "format": "double"
            }
          }
        },
        "description": "The GeoJSON Snapping Response contains the snapped coordinates in GeoJSON format."
      },
      "MatrixRequest": {
        "required": [
          "locations"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
            "example": [
              [9.70093, 48.477473],
              [9.207916, 49.153868],
              [37.573242, 55.801281],
              [115.663757, 38.106467]
            ],
            "items": {
              "type": "array",
              "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
              "example": [
                [9.70093, 48.477473],
                [9.207916, 49.153868],
                [37.573242, 55.801281],
                [115.663757, 38.106467]
              ],
              "items": {
                "type": "number",
                "description": "List of comma separated lists of `longitude,latitude` coordinates in WGS 84 (EPSG:4326)",
                "format": "double"
              }
            }
          },
          "profileName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request"
          },
          "sources": {
            "type": "array",
            "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
            "items": {
              "type": "string",
              "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). example `[0,3]` for the first and fourth locations ",
              "default": "[\"all\"]"
            },
            "default": [
              "all"
            ]
          },
          "destinations": {
            "type": "array",
            "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
            "items": {
              "type": "string",
              "description": "A list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default). `[0,3]` for the first and fourth locations ",
              "default": "[\"all\"]"
            },
            "default": [
              "all"
            ]
          },
          "metrics": {
            "type": "array",
            "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
            "items": {
              "type": "string",
              "description": "Specifies a list of returned metrics.\n\"* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in **seconds**.\n",
              "enum": [
                "distance",
                "duration"
              ],
              "default": "[\"duration\"]"
            },
            "default": [
              "duration"
            ]
          },
          "resolve_locations": {
            "type": "boolean",
            "description": "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in `destinations` and `sources` will contain a `name` element that identifies the name of the closest street. Default is `false`. ",
            "default": false
          },
          "units": {
            "type": "string",
            "description": "Specifies the distance unit.\nDefault: m.",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "default": "m",
            "x-validWhen": {
              "ref": "metrics",
              "value": "distance"
            }
          }
        },
        "description": "The JSON body request sent to the matrix service which defines options and parameters regarding the matrix to generate."
      },
      "MatrixResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/MatrixResponseInfo"
          }
        },
        "description": "The Matrix Response contains one matrix for each specified `metrics` value."
      },
      "MatrixResponseInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the request (as passed in by the query)",
            "example": "request123"
          },
          "attribution": {
            "type": "string",
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org, OpenStreetMap contributors"
          },
          "service": {
            "type": "string",
            "description": "The service that was requested",
            "example": "matrix"
          },
          "timestamp": {
            "type": "integer",
            "description": "Time that the request was made (UNIX Epoch time)",
            "format": "int64",
            "example": 1549549847974
          },
          "query": {
            "$ref": "#/components/schemas/MatrixRequest"
          },
          "engine": {
            "$ref": "#/components/schemas/EngineInfo"
          },
          "system_message": {
            "type": "string",
            "description": "System message",
            "example": "A message string configured in the service"
          }
        },
        "description": "Information about the request"
      },
      "IsochronesRequest": {
        "required": [
          "locations",
          "range"
        ],
        "type": "object",
        "properties": {
          "profileName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request"
          },
          "locations": {
            "type": "array",
            "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
            "example": [
              [8.681495, 49.41461],
              [8.686507, 49.41943]
            ],
            "items": {
              "type": "array",
              "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
              "example": [
                [8.681495, 49.41461],
                [8.686507, 49.41943]
              ],
              "items": {
                "type": "number",
                "description": "The locations to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                "format": "double"
              }
            }
          },
          "location_type": {
            "type": "string",
            "description": "`start` treats the location(s) as starting point, `destination` as goal.",
            "enum": [
              "start",
              "destination"
            ],
            "default": "start"
          },
          "range": {
            "type": "array",
            "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
            "example": [300, 200],
            "items": {
              "type": "number",
              "description": "Maximum range value of the analysis in **seconds** for time and **metres** for distance.Alternatively a comma separated list of specific range values. Ranges will be the same for all locations.",
              "format": "double"
            }
          },
          "range_type": {
            "type": "string",
            "description": "Specifies the isochrones reachability type.",
            "enum": [
              "time",
              "distance"
            ],
            "default": "time"
          },
          "units": {
            "type": "string",
            "description": "Specifies the distance units only if `range_type` is set to distance.\nDefault: m. ",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "default": "m",
            "x-validWhen": {
              "ref": "range_type",
              "value": "distance"
            }
          },
          "options": {
            "$ref": "#/components/schemas/routeOptions"
          },
          "area_units": {
            "type": "string",
            "description": "Specifies the area unit.\nDefault: m. ",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "default": "m",
            "x-validWhen": {
              "ref": "attributes",
              "value": "area"
            }
          },
          "intersections": {
            "type": "boolean",
            "description": "Specifies whether to return intersecting polygons. ",
            "default": false
          },
          "attributes": {
            "type": "array",
            "description": "List of isochrones attributes",
            "example": [
              "area"
            ],
            "items": {
              "type": "string",
              "description": "List of isochrones attributes",
              "example": "[\"area\"]",
              "enum": [
                "area",
                "reachfactor",
                "total_pop"
              ]
            }
          },
          "interval": {
            "type": "number",
            "description": "Interval of isochrones or equidistants. This is only used if a single range value is given. Value in **seconds** for time and **meters** for distance.",
            "format": "double",
            "example": 30
          },
          "smoothing": {
            "type": "number",
            "description": "Applies a level of generalisation to the isochrone polygons generated as a `smoothing_factor` between `0` and `100.0`.\nGeneralisation is produced by determining a maximum length of a connecting line between two points found on the outside of a containing polygon.\nIf the distance is larger than a threshold value, the line between the two points is removed and a smaller connecting line between other points is used.\nNote that the minimum length of this connecting line is ~1333m, and so when the `smoothing_factor` results in a distance smaller than this, the minimum value is used.\nThe threshold value is determined as `(maximum_radius_of_isochrone / 100) * smoothing_factor`.\nTherefore, a value closer to 100 will result in a more generalised shape.\nThe polygon generation algorithm is based on Duckham and al. (2008) `\"Efficient generation of simple polygons for characterizing the shape of a set of points in the plane.\"`",
            "format": "double",
            "example": 25
          }
        },
        "description": "The JSON body request sent to the isochrones service which defines options and parameters regarding the isochrones to generate."
      },
      "JSONObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object",
          "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object."
        },
        "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object."
      },
      "Restrictions": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "description": "Length restriction in metres.",
            "format": "float",
            "example": 8.4,
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "width": {
            "type": "number",
            "description": "Width restriction in metres.",
            "format": "float",
            "example": 5.6,
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "height": {
            "type": "number",
            "description": "Height restriction in metres. ",
            "format": "float",
            "example": 4.2,
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "axleload": {
            "type": "number",
            "description": "Axleload restriction in tons.",
            "format": "float",
            "example": 50,
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "weight": {
            "type": "number",
            "description": "Weight restriction in tons. ",
            "format": "float",
            "example": 40,
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "hazmat": {
            "type": "boolean",
            "description": "Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is `false`. ",
            "default": false,
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "surface_type": {
            "type": "string",
            "description": "Specifies the minimum surface type. Default is `sett`. ",
            "default": "sett",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "track_type": {
            "type": "string",
            "description": "Specifies the minimum grade of the route. Default is `grade1`. ",
            "default": "grade1",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "smoothness_type": {
            "type": "string",
            "description": "Specifies the minimum smoothness of the route. Default is `good`.",
            "enum": [
              "excellent",
              "good",
              "intermediate",
              "bad",
              "very_bad",
              "horrible",
              "very_horrible",
              "impassable"
            ],
            "default": "good",
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "maximum_sloped_kerb": {
            "type": "number",
            "description": "Specifies the maximum height of the sloped curb in metres. Values are `0.03`, `0.06` (default), `0.1`.",
            "format": "float",
            "default": 0.6,
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "maximum_incline": {
            "type": "integer",
            "description": "Specifies the maximum incline as a percentage. `3`, `6` (default), `10`, `15.",
            "format": "int32",
            "default": 6,
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "minimum_width": {
            "type": "number",
            "description": "Specifies the minimum width of the footway in metres.",
            "format": "float",
            "example": 2.5,
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          }
        },
        "description": "Describe restrictions to be applied to edges on the routing. any edges that do not match these restrictions are not traversed."
      },
      "profileParameters": {
        "title": "Profile Parameters",
        "type": "object",
        "properties": {
          "weightings": {
            "$ref": "#/components/schemas/profileWeightings"
          },
          "restrictions": {
            "$ref": "#/components/schemas/Restrictions"
          },
          "surface_quality_known": {
            "type": "boolean",
            "description": "Specifies whether to enforce that only ways with known information on surface quality be taken into account - default false",
            "example": true,
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          },
          "allow_unsuitable": {
            "type": "boolean",
            "description": "Specifies if ways that might not be suitable (e.g. unknown pedestrian usage) should be included in finding routes - default false",
            "example": true,
            "x-validWhen": {
              "ref": "profile",
              "value": "wheelchair"
            }
          }
        },
        "description": "Specifies additional routing parameters. For all profiles except `driving-car`.",
        "x-validWhen": {
          "valueNot": "driving-car",
          "ref": "profile"
        }
      },
      "profileWeightings": {
        "title": "Profile Weightings",
        "type": "object",
        "properties": {
          "steepness_difficulty": {
            "type": "integer",
            "description": "Specifies the fitness level for `cycling-*` profiles.\n\n level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.",
            "format": "int32",
            "example": 2,
            "x-validWhen": {
              "ref": "profile",
              "value": "cycling-*"
            }
          },
          "green": {
            "type": "number",
            "description": "Specifies the Green factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.",
            "format": "float",
            "example": 0.4,
            "x-validWhen": {
              "ref": "profile",
              "value": "foot-*"
            }
          },
          "quiet": {
            "type": "number",
            "description": "Specifies the Quiet factor for foot-* profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.",
            "format": "float",
            "example": 0.8,
            "x-validWhen": {
              "ref": "profile",
              "value": "foot-*"
            }
          },
          "shadow": {
            "type": "number",
            "description": "Specifies the shadow factor for `foot-*` profiles.\n\nfactor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.",
            "format": "float",
            "example": 0.4,
            "x-validWhen": {
              "ref": "profile",
              "value": "foot-*"
            }
          }
        },
        "description": "Describe additional weightings to be applied to edges on the routing."
      },
      "roundTripRouteOptions": {
        "title": "Round Trip Route Options",
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "description": "The target length of the route in `m` (note that this is a preferred value, but results may be different).",
            "format": "float",
            "example": 10000
          },
          "points": {
            "type": "integer",
            "description": "The number of points to use on the route. Larger values create more circular routes.",
            "format": "int32",
            "example": 5
          },
          "seed": {
            "type": "integer",
            "description": "A seed to use for adding randomisation to the overall direction of the generated route",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Specifies the parameters for generating round trip routes.",
        "example": {
          "length": 10000,
          "points": 5
        }
      },
      "routeOptions": {
        "title": "Route Options",
        "type": "object",
        "properties": {
          "avoid_features": {
            "type": "array",
            "description": "List of features to avoid. ",
            "example": [
              "highways"
            ],
            "items": {
              "type": "string",
              "description": "Definition of the features to be avoided.",
              "example": "[\"highways\"]",
              "enum": [
                "highways",
                "tollways",
                "ferries",
                "fords",
                "steps"
              ],
              "x-itemRestrictions": {
                "ref": "profile",
                "itemsWhen": {
                  "driving-*": [
                    "highways",
                    "tollways",
                    "ferries"
                  ],
                  "cycling-*": [
                    "ferries",
                    "steps",
                    "fords"
                  ],
                  "foot-*": [
                    "ferries",
                    "fords",
                    "steps"
                  ],
                  "wheelchair": [
                    "ferries",
                    "steps"
                  ]
                }
              }
            },
            "x-itemRestrictions": {
              "ref": "profile",
              "itemsWhen": {
                "driving-*": [
                  "highways",
                  "tollways",
                  "ferries"
                ],
                "cycling-*": [
                  "ferries",
                  "steps",
                  "fords"
                ],
                "foot-*": [
                  "ferries",
                  "fords",
                  "steps"
                ],
                "wheelchair": [
                  "ferries",
                  "steps"
                ]
              }
            }
          },
          "avoid_borders": {
            "type": "string",
            "description": "Specify which type of border crossing to avoid",
            "example": "controlled",
            "enum": [
              "all",
              "controlled",
              "none"
            ],
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-*"
            }
          },
          "avoid_countries": {
            "type": "array",
            "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://giscience.github.io/openrouteservice/technical-details/country-list). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
            "example": [11, 193],
            "items": {
              "type": "string",
              "description": "List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://giscience.github.io/openrouteservice/technical-details/country-list). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. ",
              "example": "[11,193]",
              "x-validWhen": {
                "ref": "profile",
                "value": "driving-*"
              }
            },
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-*"
            }
          },
          "vehicle_type": {
            "type": "string",
            "description": "Definition of the vehicle type.",
            "enum": [
              "hgv",
              "bus",
              "agricultural",
              "delivery",
              "forestry",
              "goods",
              "unknown"
            ],
            "default": "hgv",
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-hgv"
            }
          },
          "profile_params": {
            "$ref": "#/components/schemas/profileParameters"
          },
          "avoid_polygons": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object",
              "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object."
            },
            "description": "Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object."
          },
          "round_trip": {
            "$ref": "#/components/schemas/roundTripRouteOptions"
          }
        },
        "description": "Advanced options for routing",
        "example": {
          "avoid_borders": "controlled"
        }
      },
      "GeoJSONIsochroneBase": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "geometry": {
            "$ref": "#/components/schemas/JSONObject"
          }
        }
      },
      "GeoJSONIsochronesResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "bbox": {
            "type": "array",
            "description": "Bounding box that covers all returned isochrones",
            "example": [49.414057, 8.680894, 49.420514, 8.690123],
            "items": {
              "type": "number",
              "description": "Bounding box that covers all returned isochrones",
              "format": "double"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoJSONIsochroneBase"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/IsochronesResponseInfo"
          }
        }
      },
      "IsochronesResponseInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the request (as passed in by the query)",
            "example": "request123"
          },
          "attribution": {
            "type": "string",
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org | OpenStreetMap contributors"
          },
          "service": {
            "type": "string",
            "description": "The service that was requested",
            "example": "isochrones"
          },
          "timestamp": {
            "type": "integer",
            "description": "Time that the request was made (UNIX Epoch time)",
            "format": "int64",
            "example": 1549549847974
          },
          "query": {
            "$ref": "#/components/schemas/IsochronesRequest"
          },
          "engine": {
            "$ref": "#/components/schemas/EngineInfo"
          },
          "system_message": {
            "type": "string",
            "description": "System message",
            "example": "A message string configured in the service"
          }
        },
        "description": "Information about the request"
      },
      "graphExportService": {
        "title": "Graph export Service",
        "required": [
          "bbox"
        ],
        "type": "object",
        "properties": {
          "bbox": {
            "type": "array",
            "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
            "example": [
              [8.681495, 49.41461],
              [8.686507, 49.41943]
            ],
            "items": {
              "type": "array",
              "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
              "example": [
                [8.681495, 49.41461],
                [8.686507, 49.41943]
              ],
              "items": {
                "type": "number",
                "description": "The bounding box to use for the request as an array of `longitude/latitude` pairs",
                "format": "double"
              }
            }
          },
          "profileName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "export_request"
          }
        },
        "description": "The request payload"
      },
      "JSONWarning": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Identification code for the warning",
            "format": "int32",
            "example": 1
          },
          "message": {
            "type": "string",
            "description": "The message associated with the warning",
            "example": "This route may go over restricted roads"
          }
        },
        "description": "Informs about possible difficulties like access restrictions on the generated route. Generates a corresponding `extras` object with the affected segments."
      },
      "JsonEdge": {
        "type": "object",
        "properties": {
          "fromId": {
            "type": "integer",
            "description": "Id of the start point of the edge",
            "format": "int32",
            "example": 1
          },
          "toId": {
            "type": "integer",
            "description": "Id of the end point of the edge",
            "format": "int32",
            "example": 2
          },
          "weight": {
            "type": "number",
            "description": "Weight of the corresponding edge in the given bounding box",
            "format": "double",
            "example": 123.45
          }
        }
      },
      "JsonEdgeExtra": {
        "type": "object",
        "properties": {
          "edgeId": {
            "type": "string",
            "description": "Id of the corresponding edge in the graph",
            "example": "1"
          },
          "extra": {
            "type": "object",
            "description": "Extra info stored on the edge",
            "example": {
              "surface_quality_known": "true"
            }
          }
        }
      },
      "JsonExportResponse": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonNode"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonEdge"
            }
          },
          "edges_extra": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonEdgeExtra"
            }
          },
          "warning": {
            "$ref": "#/components/schemas/JSONWarning"
          },
          "nodes_count": {
            "type": "integer",
            "format": "int64"
          },
          "edges_count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "The Export Response contains nodes and edge weights from the requested BBox"
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "integer",
            "description": "Id of the corresponding node in the graph",
            "format": "int32",
            "example": 1
          },
          "location": {
            "type": "array",
            "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
            "example": [8.678962, 49.40783],
            "items": {
              "type": "number",
              "description": "{longitude},{latitude} coordinates of the closest accessible point on the routing graph",
              "format": "double"
            }
          }
        }
      },
      "alternativeRoutes": {
        "title": "Alternative Routes",
        "type": "object",
        "properties": {
          "target_count": {
            "type": "integer",
            "description": "Target number of alternative routes to compute. Service returns up to this number of routes that fulfill the share-factor and weight-factor constraints.",
            "format": "int32",
            "example": 2
          },
          "weight_factor": {
            "type": "number",
            "description": "Maximum factor by which route weight may diverge from the optimal route. The default value of 1.4 means alternatives can be up to 1.4 times longer (costly) than the optimal route.",
            "format": "double",
            "example": 1.4
          },
          "share_factor": {
            "type": "number",
            "description": "Maximum fraction of the route that alternatives may share with the optimal route. The default value of 0.6 means alternatives can share up to 60% of path segments with the optimal route.",
            "format": "double",
            "example": 0.6
          }
        },
        "description": "Specifies whether alternative routes are computed, and parameters for the algorithm determining suitable alternatives.",
        "example": {
          "target_count": 2,
          "weight_factor": 1.6
        }
      },
      "directionsService": {
        "title": "Directions Service",
        "required": [
          "coordinates"
        ],
        "type": "object",
        "properties": {
          "coordinates": {
            "type": "array",
            "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
            "example": [
              [8.681495, 49.41461],
              [8.686507, 49.41943],
              [8.687872, 49.420318]
            ],
            "items": {
              "type": "array",
              "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
              "example": [
                [8.681495, 49.41461],
                [8.686507, 49.41943],
                [8.687872, 49.420318]
              ],
              "items": {
                "type": "number",
                "description": "The waypoints to use for the route as an array of `longitude/latitude` pairs in WGS 84 (EPSG:4326)",
                "format": "double"
              }
            }
          },
          "profileName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Arbitrary identification string of the request reflected in the meta information.",
            "example": "my_request"
          },
          "preference": {
            "type": "string",
            "description": "Specifies the route preference",
            "enum": [
              "fastest",
              "shortest",
              "recommended"
            ],
            "default": "recommended"
          },
          "units": {
            "type": "string",
            "description": "Specifies the distance unit.",
            "enum": [
              "m",
              "km",
              "mi"
            ],
            "default": "m"
          },
          "language": {
            "type": "string",
            "description": "Language for the route instructions.",
            "enum": [
              "cs",
              "cs-cz",
              "da",
              "dk-da",
              "de",
              "de-de",
              "en",
              "en-us",
              "eo",
              "eo-eo",
              "es",
              "es-es",
              "fi",
              "fi-fi",
              "fr",
              "fr-fr",
              "gr",
              "gr-gr",
              "he",
              "he-il",
              "hu",
              "hu-hu",
              "id",
              "id-id",
              "it",
              "it-it",
              "ja",
              "ja-jp",
              "ne",
              "ne-np",
              "nl",
              "nl-nl",
              "nb",
              "nb-no",
              "pl",
              "pl-pl",
              "pt",
              "pt-pt",
              "ro",
              "ro-ro",
              "ru",
              "ru-ru",
              "tr",
              "tr-tr",
              "ua",
              "ua-ua",
              "vi",
              "vi-vn",
              "zh",
              "zh-cn"
            ],
            "default": "en"
          },
          "geometry": {
            "type": "boolean",
            "description": "Specifies whether to return geometry. ",
            "default": true,
            "x-validWhen": {
              "ref": "format",
              "value": [
                "json"
              ]
            }
          },
          "instructions": {
            "type": "boolean",
            "description": "Specifies whether to return instructions.",
            "default": true
          },
          "instructions_format": {
            "type": "string",
            "description": "Select html for more verbose instructions.",
            "enum": [
              "html",
              "text"
            ],
            "default": "text"
          },
          "roundabout_exits": {
            "type": "boolean",
            "description": "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the step object in the response. ",
            "default": false
          },
          "attributes": {
            "type": "array",
            "description": "List of route attributes",
            "example": [
              "avgspeed",
              "percentage"
            ],
            "items": {
              "type": "string",
              "description": "List of route attributes",
              "example": "[\"avgspeed\",\"percentage\"]",
              "enum": [
                "avgspeed",
                "detourfactor",
                "percentage"
              ]
            }
          },
          "maneuvers": {
            "type": "boolean",
            "description": "Specifies whether the maneuver object is included into the step object or not. ",
            "default": false
          },
          "radiuses": {
            "type": "array",
            "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
            "example": [200, -1, 30],
            "items": {
              "type": "number",
              "description": "A list of maximum distances (measured in metres) that limit the search of nearby road segments to every given waypoint. The values must be greater than 0, the value of -1 specifies using the maximum possible search radius. The number of radiuses correspond to the number of waypoints. If only a single value is given, it will be applied to all waypoints.",
              "format": "double"
            }
          },
          "bearings": {
            "type": "array",
            "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
            "example": [
              [30, 20],
              [],
              [40, 20]
            ],
            "items": {
              "type": "array",
              "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
              "example": [
                [30, 20],
                [],
                [40, 20]
              ],
              "items": {
                "type": "number",
                "description": "Specifies a list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to.\n\"For example `bearings=[[45,10],[120,20]]`.\n\"Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing.\n\"The bearing can take values between `0` and `360` clockwise from true north. If the deviation is not set, then the default value of `100` degrees is used.\n\"The number of pairs must correspond to the number of waypoints.\n\"The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached.\n\"You can skip a bearing for a certain waypoint by passing an empty value for an array, e.g. `[30,20],[],[40,20]`.",
                "format": "double",
                "x-validWhen": {
                  "ref": "profile",
                  "value": "cycling-*"
                }
              },
              "x-validWhen": {
                "ref": "profile",
                "value": "cycling-*"
              }
            },
            "x-validWhen": {
              "ref": "profile",
              "value": "cycling-*"
            }
          },
          "continue_straight": {
            "type": "boolean",
            "description": "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster.",
            "default": false
          },
          "elevation": {
            "type": "boolean",
            "description": "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for json response encoded polyline.",
            "example": false
          },
          "extra_info": {
            "type": "array",
            "description": "The extra info items to include in the response",
            "example": [
              "waytype",
              "surface"
            ],
            "items": {
              "type": "string",
              "description": "Specify which extra info items to include in the response",
              "example": "[\"waytype\",\"surface\"]",
              "enum": [
                "steepness",
                "suitability",
                "surface",
                "waycategory",
                "waytype",
                "tollways",
                "traildifficulty",
                "osmid",
                "roadaccessrestrictions",
                "countryinfo",
                "green",
                "noise",
                "csv",
                "shadow"
              ]
            }
          },
          "options": {
            "$ref": "#/components/schemas/routeOptions"
          },
          "suppress_warnings": {
            "type": "boolean",
            "description": "Suppress warning messages in the response",
            "example": false
          },
          "geometry_simplify": {
            "type": "boolean",
            "description": "Specifies whether to simplify the geometry. Simplify geometry cannot be applied to routes with more than **one segment** and when `extra_info` is required.",
            "default": false
          },
          "skip_segments": {
            "type": "array",
            "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
            "example": [2, 4],
            "items": {
              "type": "integer",
              "description": "Specifies the segments that should be skipped in the route calculation. A segment is the connection between two given coordinates and the counting starts with 1 for the connection between the first and second coordinate.",
              "format": "int32"
            }
          },
          "alternative_routes": {
            "$ref": "#/components/schemas/alternativeRoutes"
          },
          "maximum_speed": {
            "type": "number",
            "description": "The maximum speed specified by user.",
            "format": "double",
            "example": 90,
            "x-validWhen": {
              "ref": "profile",
              "value": "driving-*"
            }
          },
          "schedule": {
            "type": "boolean",
            "description": "If true, return a public transport schedule starting at \u003Cdeparture\u003E for the next \u003Cschedule_duration\u003E minutes.",
            "example": true,
            "default": false,
            "x-validWhen": {
              "ref": "profile",
              "value": "public-transport"
            }
          },
          "schedule_duration": {
            "type": "string",
            "description": "The time window when requesting a public transport schedule. The format is passed as ISO 8601 duration: https://en.wikipedia.org/wiki/ISO_8601#Durations",
            "example": "PT30M",
            "x-validWhen": {
              "ref": "schedule",
              "value": true
            }
          },
          "schedule_rows": {
            "type": "integer",
            "description": "The maximum amount of entries that should be returned when requesting a schedule.",
            "format": "int32",
            "example": 3,
            "x-validWhen": {
              "ref": "schedule",
              "value": true
            }
          },
          "walking_time": {
            "type": "string",
            "description": "Maximum duration for walking access and egress of public transport. The value is passed in ISO 8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations",
            "example": "PT30M",
            "default": "PT15M",
            "x-validWhen": {
              "ref": "profile",
              "value": "public-transport"
            }
          },
          "ignore_transfers": {
            "type": "boolean",
            "description": "Specifies if transfers as criterion should be ignored.",
            "example": true,
            "default": false,
            "x-validWhen": {
              "ref": "profile",
              "value": "public-transport"
            }
          }
        },
        "description": "The JSON body request sent to the routing service which defines options and parameters regarding the route to generate."
      },
      "JSONExtra": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/) assigned to this section.",
            "example": [
              [0, 3, 26],
              [3, 10, 12]
            ],
            "items": {
              "type": "array",
              "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/) assigned to this section.",
              "example": [
                [0, 3, 26],
                [3, 10, 12]
              ],
              "items": {
                "type": "integer",
                "description": "A list of values representing a section of the route. The individual values are: \nValue 1: Indice of the staring point of the geometry for this section,\nValue 2: Indice of the end point of the geoemetry for this sections,\nValue 3: [Value](https://GIScience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/) assigned to this section.",
                "format": "int64"
              }
            }
          },
          "summary": {
            "type": "array",
            "description": "List representing the summary of the extra info items.",
            "items": {
              "$ref": "#/components/schemas/JSONExtraSummary"
            }
          }
        },
        "description": "An object representing one of the extra info items requested"
      },
      "JSONExtraSummary": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "[Value](https://giscience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/) of a info category.",
            "format": "double",
            "example": 5
          },
          "distance": {
            "type": "number",
            "description": "Cumulative distance of this value.",
            "format": "double",
            "example": 123.1
          },
          "amount": {
            "type": "number",
            "description": "Category percentage of the entire route.",
            "format": "double",
            "example": 23.8
          }
        },
        "description": "List representing the summary of the extra info items."
      },
      "JSONIndividualRouteResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/JSONSummary"
          },
          "segments": {
            "type": "array",
            "description": "List containing the segments and its corresponding steps which make up the route.",
            "items": {
              "$ref": "#/components/schemas/JSONSegment"
            }
          },
          "bbox": {
            "type": "array",
            "description": "A bounding box which contains the entire route",
            "example": [49.414057, 8.680894, 49.420514, 8.690123],
            "items": {
              "type": "number",
              "description": "A bounding box which contains the entire route",
              "format": "double"
            }
          },
          "geometry": {
            "type": "string",
            "description": "The geometry of the route. For JSON route responses this is an encoded polyline.",
            "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C"
          },
          "way_points": {
            "type": "array",
            "description": "List containing the indices of way points corresponding to the *geometry*.",
            "example": [0, 23],
            "items": {
              "type": "integer",
              "description": "List containing the indices of way points corresponding to the *geometry*.",
              "format": "int32"
            }
          },
          "warnings": {
            "type": "array",
            "description": "List of warnings that have been generated for the route",
            "items": {
              "$ref": "#/components/schemas/JSONWarning"
            }
          },
          "legs": {
            "type": "array",
            "description": "List containing the legs the route consists of.",
            "items": {
              "$ref": "#/components/schemas/JSONLeg"
            }
          },
          "extras": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONExtra"
            },
            "description": "List of extra info objects representing the extra info items that were requested for the route."
          },
          "departure": {
            "type": "string",
            "description": "Departure date and time",
            "format": "date-time",
            "example": "2020-01-31T12:45:00+01:00",
            "x-validWhen": {
              "ref": "departure",
              "value": true
            }
          },
          "arrival": {
            "type": "string",
            "description": "Arrival date and time",
            "format": "date-time",
            "example": "2020-01-31T13:15:00+01:00",
            "x-validWhen": {
              "ref": "arrival",
              "value": true
            }
          }
        },
        "description": "An individual JSON based route created by the service"
      },
      "JSONLeg": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the leg, possible values are currently 'walk' and 'pt'.",
            "example": "pt"
          },
          "departure_location": {
            "type": "string",
            "description": "The departure location of the leg.",
            "example": "Dossenheim, Süd Bstg G1"
          },
          "trip_headsign": {
            "type": "string",
            "description": "The headsign of the public transport vehicle of the leg.",
            "example": "Bismarckplatz - Speyererhof - EMBL - Boxberg - Mombertplatz"
          },
          "route_long_name": {
            "type": "string",
            "description": "The public transport route name of the leg.",
            "example": "RNV Bus 39A"
          },
          "route_short_name": {
            "type": "string",
            "description": "The public transport route name (short version) of the leg.",
            "example": "39A"
          },
          "route_desc": {
            "type": "string",
            "description": "The route description of the leg (if provided in the GTFS data set).",
            "example": "Bus"
          },
          "route_type": {
            "type": "integer",
            "description": "The route type of the leg (if provided in the GTFS data set).",
            "format": "int32",
            "example": 1
          },
          "distance": {
            "type": "number",
            "description": "The distance for the leg in metres.",
            "format": "double",
            "example": 245
          },
          "duration": {
            "type": "number",
            "description": "The duration for the leg in seconds.",
            "format": "double",
            "example": 96.2
          },
          "departure": {
            "type": "string",
            "description": "Departure date and time",
            "format": "date-time",
            "example": "2020-01-31T12:45:00+01:00",
            "x-validWhen": {
              "ref": "departure",
              "value": true
            }
          },
          "arrival": {
            "type": "string",
            "description": "Arrival date and time",
            "format": "date-time",
            "example": "2020-01-31T13:15:00+01:00",
            "x-validWhen": {
              "ref": "arrival",
              "value": true
            }
          },
          "feed_id": {
            "type": "string",
            "description": "The feed ID this public transport leg based its information from.",
            "example": "gtfs_0"
          },
          "trip_id": {
            "type": "string",
            "description": "The trip ID of this public transport leg.",
            "example": "trip_id: vrn-19-39A-1-2-21-H-8-Special-50-42"
          },
          "route_id": {
            "type": "string",
            "description": "The route ID of this public transport leg.",
            "example": "vrn-19-39A-1"
          },
          "is_in_same_vehicle_as_previous": {
            "type": "boolean",
            "description": "Whether the legs continues in the same vehicle as the previous one.",
            "example": false
          },
          "geometry": {
            "type": "string",
            "description": "The geometry of the leg. This is an encoded polyline.",
            "example": "yuqlH{i~s@gaUe@VgEQFcBRbB_C"
          },
          "instructions": {
            "type": "array",
            "description": "List containing the specific steps the segment consists of.",
            "items": {
              "$ref": "#/components/schemas/JSONStep"
            }
          },
          "stops": {
            "type": "array",
            "description": "List containing the stops the along the leg.",
            "items": {
              "$ref": "#/components/schemas/JSONPtStop"
            }
          }
        },
        "description": "Leg of a route"
      },
      "JSONPtStop": {
        "type": "object",
        "properties": {
          "stop_id": {
            "type": "string",
            "description": "The ID of the stop.",
            "example": "de:08221:1138:0:O"
          },
          "name": {
            "type": "string",
            "description": "The name of the stop.",
            "example": "Heidelberg, Alois-Link-Platz"
          },
          "location": {
            "type": "array",
            "description": "The location of the stop.",
            "example": [8.6912542, 49.399979],
            "items": {
              "type": "number",
              "description": "The location of the stop.",
              "format": "double"
            }
          },
          "arrival_time": {
            "type": "string",
            "description": "Arrival time of the stop.",
            "format": "date-time",
            "example": "2022-07-04T13:22:00Z"
          },
          "planned_arrival_time": {
            "type": "string",
            "description": "Planned arrival time of the stop.",
            "format": "date-time",
            "example": "2022-07-04T13:22:00Z"
          },
          "predicted_arrival_time": {
            "type": "string",
            "description": "Predicted arrival time of the stop.",
            "format": "date-time",
            "example": "2022-07-04T13:22:00Z"
          },
          "arrival_cancelled": {
            "type": "boolean",
            "description": "Whether arrival at the stop was cancelled.",
            "example": false
          },
          "departure_time": {
            "type": "string",
            "description": "Departure time of the stop.",
            "format": "date-time",
            "example": "2022-07-04T13:22:00Z"
          },
          "planned_departure_time": {
            "type": "string",
            "description": "Planned departure time of the stop.",
            "format": "date-time",
            "example": "2022-07-04T13:22:00Z"
          },
          "predicted_departure_time": {
            "type": "string",
            "description": "Predicted departure time of the stop.",
            "format": "date-time",
            "example": "2022-07-04T13:22:00Z"
          },
          "departure_cancelled": {
            "type": "boolean",
            "description": "Whether departure at the stop was cancelled.",
            "example": false
          }
        },
        "description": "Stop of a public transport leg"
      },
      "JSONRouteResponse": {
        "type": "object",
        "properties": {
          "bbox": {
            "type": "array",
            "description": "Bounding box that covers all returned routes",
            "example": [49.414057, 8.680894, 49.420514, 8.690123],
            "items": {
              "type": "number",
              "description": "Bounding box that covers all returned routes",
              "format": "double"
            }
          },
          "routes": {
            "type": "array",
            "description": "A list of routes returned from the request",
            "items": {
              "$ref": "#/components/schemas/JSONIndividualRouteResponse"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/RouteResponseInfo"
          }
        }
      },
      "JSONSegment": {
        "type": "object",
        "properties": {
          "distance": {
            "type": "number",
            "description": "Contains the distance of the segment in specified units.",
            "format": "double",
            "example": 253
          },
          "duration": {
            "type": "number",
            "description": "Contains the duration of the segment in seconds.",
            "format": "double",
            "example": 37.7
          },
          "steps": {
            "type": "array",
            "description": "List containing the specific steps the segment consists of.",
            "items": {
              "$ref": "#/components/schemas/JSONStep"
            }
          },
          "detourfactor": {
            "type": "number",
            "description": "Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.",
            "format": "double",
            "example": 0.5,
            "x-validWhen": {
              "ref": "attributes",
              "valueContains": "detourfactor"
            }
          },
          "percentage": {
            "type": "number",
            "description": "Contains the proportion of the route in percent.",
            "format": "double",
            "example": 43.2,
            "x-validWhen": {
              "ref": "attributes",
              "valueContains": "percentage"
            }
          },
          "avgspeed": {
            "type": "number",
            "description": "Contains the average speed of this segment in km/h.",
            "format": "double",
            "example": 56.3,
            "x-validWhen": {
              "ref": "attributes",
              "valueContains": "avgspeed"
            }
          },
          "ascent": {
            "type": "number",
            "description": " Contains ascent of this segment in metres.",
            "format": "double",
            "example": 56.3,
            "x-validWhen": {
              "ref": "elevation",
              "value": true
            }
          },
          "descent": {
            "type": "number",
            "description": "Contains descent of this segment in metres.",
            "format": "double",
            "example": 45.2
          }
        },
        "description": "List containing the segments and its correspoding steps which make up the route."
      },
      "JSONStep": {
        "type": "object",
        "properties": {
          "distance": {
            "type": "number",
            "description": "The distance for the step in metres.",
            "format": "double",
            "example": 245
          },
          "duration": {
            "type": "number",
            "description": "The duration for the step in seconds.",
            "format": "double",
            "example": 96.2
          },
          "type": {
            "type": "integer",
            "description": "The [instruction](https://giscience.github.io/openrouteservice/api-reference/endpoints/directions/instruction-types) action for symbolisation purposes.",
            "format": "int32",
            "example": 1
          },
          "instruction": {
            "type": "string",
            "description": "The routing instruction text for the step.",
            "example": "Turn right onto Berliner Straße"
          },
          "name": {
            "type": "string",
            "description": "The name of the next street.",
            "example": "Berliner Straße"
          },
          "exit_number": {
            "type": "integer",
            "description": "Only for roundabouts. Contains the number of the exit to take.",
            "format": "int32",
            "example": 2
          },
          "exit_bearings": {
            "type": "array",
            "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
            "example": [10, 45, 60],
            "items": {
              "type": "integer",
              "description": "Contains the bearing of the entrance and all passed exits in a roundabout.",
              "format": "int32",
              "x-validWhen": {
                "ref": "roundabout_exits",
                "value": true
              }
            },
            "x-validWhen": {
              "ref": "roundabout_exits",
              "value": true
            }
          },
          "way_points": {
            "type": "array",
            "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
            "example": [45, 48],
            "items": {
              "type": "integer",
              "description": "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
              "format": "int32"
            }
          },
          "maneuver": {
            "$ref": "#/components/schemas/JSONStepManeuver"
          }
        },
        "description": "Step of a route segment"
      },
      "JSONStepManeuver": {
        "type": "object",
        "properties": {
          "location": {
            "type": "array",
            "description": "The coordinate of the point where a maneuver takes place.",
            "example": [8.678962, 49.407819],
            "items": {
              "type": "number",
              "description": "The coordinate of the point where a maneuver takes place.",
              "format": "double"
            }
          },
          "bearing_before": {
            "type": "integer",
            "description": "The azimuth angle (in degrees) of the direction right before the maneuver.",
            "format": "int32",
            "example": 24
          },
          "bearing_after": {
            "type": "integer",
            "description": "The azimuth angle (in degrees) of the direction right after the maneuver.",
            "format": "int32",
            "example": 96
          }
        },
        "description": "Maneuver object of the step",
        "x-validWhen": {
          "ref": "maneuvers",
          "value": true
        }
      },
      "JSONSummary": {
        "type": "object",
        "properties": {
          "distance": {
            "type": "number",
            "description": "Total route distance in specified units.",
            "format": "double",
            "example": 12.6
          },
          "duration": {
            "type": "number",
            "description": "Total duration in seconds.",
            "format": "double",
            "example": 604
          },
          "ascent": {
            "type": "number",
            "description": "Total ascent in meters.",
            "format": "double",
            "example": 166.3,
            "x-validWhen": {
              "ref": "elevation",
              "value": true
            }
          },
          "descent": {
            "type": "number",
            "description": "Total descent in meters.",
            "format": "double",
            "example": 201.3,
            "x-validWhen": {
              "ref": "elevation",
              "value": true
            }
          },
          "transfers": {
            "type": "integer",
            "format": "int32"
          },
          "fare": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Contains total sums of duration, route distance and actual distance of the route."
      },
      "RouteResponseInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the request (as passed in by the query)",
            "example": "request123"
          },
          "attribution": {
            "type": "string",
            "description": "Copyright and attribution information",
            "example": "openrouteservice.org | OpenStreetMap contributors"
          },
          "service": {
            "type": "string",
            "description": "The service that was requested",
            "example": "routing"
          },
          "timestamp": {
            "type": "integer",
            "description": "Time that the request was made (UNIX Epoch time)",
            "format": "int64",
            "example": 1549549847974
          },
          "query": {
            "$ref": "#/components/schemas/directionsService"
          },
          "engine": {
            "$ref": "#/components/schemas/EngineInfo"
          },
          "system_message": {
            "type": "string",
            "description": "System message",
            "example": "A message string configured in the service"
          }
        },
        "description": "Information about the request"
      },
      "gpx": {
        "type": "object",
        "properties": {
          "gpxRouteElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/rte"
            }
          }
        },
        "xml": {
          "name": "gpx"
        }
      },
      "rte": {
        "type": "object",
        "xml": {
          "name": "rte"
        }
      },
      "GeoJSONRouteResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "bbox": {
            "type": "array",
            "description": "Bounding box that covers all returned routes",
            "example": [49.414057, 8.680894, 49.420514, 8.690123],
            "items": {
              "type": "number",
              "description": "Bounding box that covers all returned routes",
              "format": "double"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/RouteResponseInfo"
          }
        }
      }
    }
  }
}
