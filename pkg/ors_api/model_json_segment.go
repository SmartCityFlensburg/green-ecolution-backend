/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JSONSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONSegment{}

// JSONSegment List containing the segments and its correspoding steps which make up the route.
type JSONSegment struct {
	// Contains the distance of the segment in specified units.
	Distance *float64 `json:"distance,omitempty"`
	// Contains the duration of the segment in seconds.
	Duration *float64 `json:"duration,omitempty"`
	// List containing the specific steps the segment consists of.
	Steps []JSONStep `json:"steps,omitempty"`
	// Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`.
	Detourfactor *float64 `json:"detourfactor,omitempty"`
	// Contains the proportion of the route in percent.
	Percentage *float64 `json:"percentage,omitempty"`
	// Contains the average speed of this segment in km/h.
	Avgspeed *float64 `json:"avgspeed,omitempty"`
	//  Contains ascent of this segment in metres.
	Ascent *float64 `json:"ascent,omitempty"`
	// Contains descent of this segment in metres.
	Descent *float64 `json:"descent,omitempty"`
}

// NewJSONSegment instantiates a new JSONSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONSegment() *JSONSegment {
	this := JSONSegment{}
	return &this
}

// NewJSONSegmentWithDefaults instantiates a new JSONSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONSegmentWithDefaults() *JSONSegment {
	this := JSONSegment{}
	return &this
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *JSONSegment) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *JSONSegment) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *JSONSegment) SetDistance(v float64) {
	o.Distance = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *JSONSegment) GetDuration() float64 {
	if o == nil || IsNil(o.Duration) {
		var ret float64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetDurationOk() (*float64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *JSONSegment) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float64 and assigns it to the Duration field.
func (o *JSONSegment) SetDuration(v float64) {
	o.Duration = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *JSONSegment) GetSteps() []JSONStep {
	if o == nil || IsNil(o.Steps) {
		var ret []JSONStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetStepsOk() ([]JSONStep, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *JSONSegment) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []JSONStep and assigns it to the Steps field.
func (o *JSONSegment) SetSteps(v []JSONStep) {
	o.Steps = v
}

// GetDetourfactor returns the Detourfactor field value if set, zero value otherwise.
func (o *JSONSegment) GetDetourfactor() float64 {
	if o == nil || IsNil(o.Detourfactor) {
		var ret float64
		return ret
	}
	return *o.Detourfactor
}

// GetDetourfactorOk returns a tuple with the Detourfactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetDetourfactorOk() (*float64, bool) {
	if o == nil || IsNil(o.Detourfactor) {
		return nil, false
	}
	return o.Detourfactor, true
}

// HasDetourfactor returns a boolean if a field has been set.
func (o *JSONSegment) HasDetourfactor() bool {
	if o != nil && !IsNil(o.Detourfactor) {
		return true
	}

	return false
}

// SetDetourfactor gets a reference to the given float64 and assigns it to the Detourfactor field.
func (o *JSONSegment) SetDetourfactor(v float64) {
	o.Detourfactor = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *JSONSegment) GetPercentage() float64 {
	if o == nil || IsNil(o.Percentage) {
		var ret float64
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetPercentageOk() (*float64, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *JSONSegment) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given float64 and assigns it to the Percentage field.
func (o *JSONSegment) SetPercentage(v float64) {
	o.Percentage = &v
}

// GetAvgspeed returns the Avgspeed field value if set, zero value otherwise.
func (o *JSONSegment) GetAvgspeed() float64 {
	if o == nil || IsNil(o.Avgspeed) {
		var ret float64
		return ret
	}
	return *o.Avgspeed
}

// GetAvgspeedOk returns a tuple with the Avgspeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetAvgspeedOk() (*float64, bool) {
	if o == nil || IsNil(o.Avgspeed) {
		return nil, false
	}
	return o.Avgspeed, true
}

// HasAvgspeed returns a boolean if a field has been set.
func (o *JSONSegment) HasAvgspeed() bool {
	if o != nil && !IsNil(o.Avgspeed) {
		return true
	}

	return false
}

// SetAvgspeed gets a reference to the given float64 and assigns it to the Avgspeed field.
func (o *JSONSegment) SetAvgspeed(v float64) {
	o.Avgspeed = &v
}

// GetAscent returns the Ascent field value if set, zero value otherwise.
func (o *JSONSegment) GetAscent() float64 {
	if o == nil || IsNil(o.Ascent) {
		var ret float64
		return ret
	}
	return *o.Ascent
}

// GetAscentOk returns a tuple with the Ascent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetAscentOk() (*float64, bool) {
	if o == nil || IsNil(o.Ascent) {
		return nil, false
	}
	return o.Ascent, true
}

// HasAscent returns a boolean if a field has been set.
func (o *JSONSegment) HasAscent() bool {
	if o != nil && !IsNil(o.Ascent) {
		return true
	}

	return false
}

// SetAscent gets a reference to the given float64 and assigns it to the Ascent field.
func (o *JSONSegment) SetAscent(v float64) {
	o.Ascent = &v
}

// GetDescent returns the Descent field value if set, zero value otherwise.
func (o *JSONSegment) GetDescent() float64 {
	if o == nil || IsNil(o.Descent) {
		var ret float64
		return ret
	}
	return *o.Descent
}

// GetDescentOk returns a tuple with the Descent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSegment) GetDescentOk() (*float64, bool) {
	if o == nil || IsNil(o.Descent) {
		return nil, false
	}
	return o.Descent, true
}

// HasDescent returns a boolean if a field has been set.
func (o *JSONSegment) HasDescent() bool {
	if o != nil && !IsNil(o.Descent) {
		return true
	}

	return false
}

// SetDescent gets a reference to the given float64 and assigns it to the Descent field.
func (o *JSONSegment) SetDescent(v float64) {
	o.Descent = &v
}

func (o JSONSegment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.Detourfactor) {
		toSerialize["detourfactor"] = o.Detourfactor
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.Avgspeed) {
		toSerialize["avgspeed"] = o.Avgspeed
	}
	if !IsNil(o.Ascent) {
		toSerialize["ascent"] = o.Ascent
	}
	if !IsNil(o.Descent) {
		toSerialize["descent"] = o.Descent
	}
	return toSerialize, nil
}

type NullableJSONSegment struct {
	value *JSONSegment
	isSet bool
}

func (v NullableJSONSegment) Get() *JSONSegment {
	return v.value
}

func (v *NullableJSONSegment) Set(val *JSONSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONSegment(val *JSONSegment) *NullableJSONSegment {
	return &NullableJSONSegment{value: val, isSet: true}
}

func (v NullableJSONSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


