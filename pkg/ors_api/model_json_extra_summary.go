/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JSONExtraSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONExtraSummary{}

// JSONExtraSummary List representing the summary of the extra info items.
type JSONExtraSummary struct {
	// [Value](https://giscience.github.io/openrouteservice/api-reference/endpoints/directions/extra-info/) of a info category.
	Value *float64 `json:"value,omitempty"`
	// Cumulative distance of this value.
	Distance *float64 `json:"distance,omitempty"`
	// Category percentage of the entire route.
	Amount *float64 `json:"amount,omitempty"`
}

// NewJSONExtraSummary instantiates a new JSONExtraSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONExtraSummary() *JSONExtraSummary {
	this := JSONExtraSummary{}
	return &this
}

// NewJSONExtraSummaryWithDefaults instantiates a new JSONExtraSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONExtraSummaryWithDefaults() *JSONExtraSummary {
	this := JSONExtraSummary{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *JSONExtraSummary) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONExtraSummary) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *JSONExtraSummary) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *JSONExtraSummary) SetValue(v float64) {
	o.Value = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *JSONExtraSummary) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONExtraSummary) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *JSONExtraSummary) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *JSONExtraSummary) SetDistance(v float64) {
	o.Distance = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *JSONExtraSummary) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONExtraSummary) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *JSONExtraSummary) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *JSONExtraSummary) SetAmount(v float64) {
	o.Amount = &v
}

func (o JSONExtraSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONExtraSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	return toSerialize, nil
}

type NullableJSONExtraSummary struct {
	value *JSONExtraSummary
	isSet bool
}

func (v NullableJSONExtraSummary) Get() *JSONExtraSummary {
	return v.value
}

func (v *NullableJSONExtraSummary) Set(val *JSONExtraSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONExtraSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONExtraSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONExtraSummary(val *JSONExtraSummary) *NullableJSONExtraSummary {
	return &NullableJSONExtraSummary{value: val, isSet: true}
}

func (v NullableJSONExtraSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONExtraSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


