/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the GeoJSONIsochroneBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJSONIsochroneBase{}

// GeoJSONIsochroneBase struct for GeoJSONIsochroneBase
type GeoJSONIsochroneBase struct {
	Type *string `json:"type,omitempty"`
	Geometry *JSONObject `json:"geometry,omitempty"`
}

// NewGeoJSONIsochroneBase instantiates a new GeoJSONIsochroneBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJSONIsochroneBase() *GeoJSONIsochroneBase {
	this := GeoJSONIsochroneBase{}
	return &this
}

// NewGeoJSONIsochroneBaseWithDefaults instantiates a new GeoJSONIsochroneBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJSONIsochroneBaseWithDefaults() *GeoJSONIsochroneBase {
	this := GeoJSONIsochroneBase{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GeoJSONIsochroneBase) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONIsochroneBase) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GeoJSONIsochroneBase) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GeoJSONIsochroneBase) SetType(v string) {
	o.Type = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *GeoJSONIsochroneBase) GetGeometry() JSONObject {
	if o == nil || IsNil(o.Geometry) {
		var ret JSONObject
		return ret
	}
	return *o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONIsochroneBase) GetGeometryOk() (*JSONObject, bool) {
	if o == nil || IsNil(o.Geometry) {
		return nil, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *GeoJSONIsochroneBase) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given JSONObject and assigns it to the Geometry field.
func (o *GeoJSONIsochroneBase) SetGeometry(v JSONObject) {
	o.Geometry = &v
}

func (o GeoJSONIsochroneBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJSONIsochroneBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	return toSerialize, nil
}

type NullableGeoJSONIsochroneBase struct {
	value *GeoJSONIsochroneBase
	isSet bool
}

func (v NullableGeoJSONIsochroneBase) Get() *GeoJSONIsochroneBase {
	return v.value
}

func (v *NullableGeoJSONIsochroneBase) Set(val *GeoJSONIsochroneBase) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJSONIsochroneBase) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJSONIsochroneBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJSONIsochroneBase(val *GeoJSONIsochroneBase) *NullableGeoJSONIsochroneBase {
	return &NullableGeoJSONIsochroneBase{value: val, isSet: true}
}

func (v NullableGeoJSONIsochroneBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJSONIsochroneBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


