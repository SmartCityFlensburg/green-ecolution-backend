/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JSONSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONSummary{}

// JSONSummary Contains total sums of duration, route distance and actual distance of the route.
type JSONSummary struct {
	// Total route distance in specified units.
	Distance *float64 `json:"distance,omitempty"`
	// Total duration in seconds.
	Duration *float64 `json:"duration,omitempty"`
	// Total ascent in meters.
	Ascent *float64 `json:"ascent,omitempty"`
	// Total descent in meters.
	Descent *float64 `json:"descent,omitempty"`
	Transfers *int32 `json:"transfers,omitempty"`
	Fare *int32 `json:"fare,omitempty"`
}

// NewJSONSummary instantiates a new JSONSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONSummary() *JSONSummary {
	this := JSONSummary{}
	return &this
}

// NewJSONSummaryWithDefaults instantiates a new JSONSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONSummaryWithDefaults() *JSONSummary {
	this := JSONSummary{}
	return &this
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *JSONSummary) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSummary) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *JSONSummary) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *JSONSummary) SetDistance(v float64) {
	o.Distance = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *JSONSummary) GetDuration() float64 {
	if o == nil || IsNil(o.Duration) {
		var ret float64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSummary) GetDurationOk() (*float64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *JSONSummary) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float64 and assigns it to the Duration field.
func (o *JSONSummary) SetDuration(v float64) {
	o.Duration = &v
}

// GetAscent returns the Ascent field value if set, zero value otherwise.
func (o *JSONSummary) GetAscent() float64 {
	if o == nil || IsNil(o.Ascent) {
		var ret float64
		return ret
	}
	return *o.Ascent
}

// GetAscentOk returns a tuple with the Ascent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSummary) GetAscentOk() (*float64, bool) {
	if o == nil || IsNil(o.Ascent) {
		return nil, false
	}
	return o.Ascent, true
}

// HasAscent returns a boolean if a field has been set.
func (o *JSONSummary) HasAscent() bool {
	if o != nil && !IsNil(o.Ascent) {
		return true
	}

	return false
}

// SetAscent gets a reference to the given float64 and assigns it to the Ascent field.
func (o *JSONSummary) SetAscent(v float64) {
	o.Ascent = &v
}

// GetDescent returns the Descent field value if set, zero value otherwise.
func (o *JSONSummary) GetDescent() float64 {
	if o == nil || IsNil(o.Descent) {
		var ret float64
		return ret
	}
	return *o.Descent
}

// GetDescentOk returns a tuple with the Descent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSummary) GetDescentOk() (*float64, bool) {
	if o == nil || IsNil(o.Descent) {
		return nil, false
	}
	return o.Descent, true
}

// HasDescent returns a boolean if a field has been set.
func (o *JSONSummary) HasDescent() bool {
	if o != nil && !IsNil(o.Descent) {
		return true
	}

	return false
}

// SetDescent gets a reference to the given float64 and assigns it to the Descent field.
func (o *JSONSummary) SetDescent(v float64) {
	o.Descent = &v
}

// GetTransfers returns the Transfers field value if set, zero value otherwise.
func (o *JSONSummary) GetTransfers() int32 {
	if o == nil || IsNil(o.Transfers) {
		var ret int32
		return ret
	}
	return *o.Transfers
}

// GetTransfersOk returns a tuple with the Transfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSummary) GetTransfersOk() (*int32, bool) {
	if o == nil || IsNil(o.Transfers) {
		return nil, false
	}
	return o.Transfers, true
}

// HasTransfers returns a boolean if a field has been set.
func (o *JSONSummary) HasTransfers() bool {
	if o != nil && !IsNil(o.Transfers) {
		return true
	}

	return false
}

// SetTransfers gets a reference to the given int32 and assigns it to the Transfers field.
func (o *JSONSummary) SetTransfers(v int32) {
	o.Transfers = &v
}

// GetFare returns the Fare field value if set, zero value otherwise.
func (o *JSONSummary) GetFare() int32 {
	if o == nil || IsNil(o.Fare) {
		var ret int32
		return ret
	}
	return *o.Fare
}

// GetFareOk returns a tuple with the Fare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONSummary) GetFareOk() (*int32, bool) {
	if o == nil || IsNil(o.Fare) {
		return nil, false
	}
	return o.Fare, true
}

// HasFare returns a boolean if a field has been set.
func (o *JSONSummary) HasFare() bool {
	if o != nil && !IsNil(o.Fare) {
		return true
	}

	return false
}

// SetFare gets a reference to the given int32 and assigns it to the Fare field.
func (o *JSONSummary) SetFare(v int32) {
	o.Fare = &v
}

func (o JSONSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Ascent) {
		toSerialize["ascent"] = o.Ascent
	}
	if !IsNil(o.Descent) {
		toSerialize["descent"] = o.Descent
	}
	if !IsNil(o.Transfers) {
		toSerialize["transfers"] = o.Transfers
	}
	if !IsNil(o.Fare) {
		toSerialize["fare"] = o.Fare
	}
	return toSerialize, nil
}

type NullableJSONSummary struct {
	value *JSONSummary
	isSet bool
}

func (v NullableJSONSummary) Get() *JSONSummary {
	return v.value
}

func (v *NullableJSONSummary) Set(val *JSONSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONSummary(val *JSONSummary) *NullableJSONSummary {
	return &NullableJSONSummary{value: val, isSet: true}
}

func (v NullableJSONSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


