/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the GeoJSONFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJSONFeature{}

// GeoJSONFeature Information about the service and request
type GeoJSONFeature struct {
	// GeoJSON type
	Type *string `json:"type,omitempty"`
	Properties *GeoJSONFeatureProperties `json:"properties,omitempty"`
	Geometry *GeoJSONPointGeometry `json:"geometry,omitempty"`
}

// NewGeoJSONFeature instantiates a new GeoJSONFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJSONFeature() *GeoJSONFeature {
	this := GeoJSONFeature{}
	var type_ string = "Feature"
	this.Type = &type_
	return &this
}

// NewGeoJSONFeatureWithDefaults instantiates a new GeoJSONFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJSONFeatureWithDefaults() *GeoJSONFeature {
	this := GeoJSONFeature{}
	var type_ string = "Feature"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GeoJSONFeature) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONFeature) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GeoJSONFeature) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GeoJSONFeature) SetType(v string) {
	o.Type = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *GeoJSONFeature) GetProperties() GeoJSONFeatureProperties {
	if o == nil || IsNil(o.Properties) {
		var ret GeoJSONFeatureProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONFeature) GetPropertiesOk() (*GeoJSONFeatureProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *GeoJSONFeature) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given GeoJSONFeatureProperties and assigns it to the Properties field.
func (o *GeoJSONFeature) SetProperties(v GeoJSONFeatureProperties) {
	o.Properties = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *GeoJSONFeature) GetGeometry() GeoJSONPointGeometry {
	if o == nil || IsNil(o.Geometry) {
		var ret GeoJSONPointGeometry
		return ret
	}
	return *o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONFeature) GetGeometryOk() (*GeoJSONPointGeometry, bool) {
	if o == nil || IsNil(o.Geometry) {
		return nil, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *GeoJSONFeature) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given GeoJSONPointGeometry and assigns it to the Geometry field.
func (o *GeoJSONFeature) SetGeometry(v GeoJSONPointGeometry) {
	o.Geometry = &v
}

func (o GeoJSONFeature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJSONFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	return toSerialize, nil
}

type NullableGeoJSONFeature struct {
	value *GeoJSONFeature
	isSet bool
}

func (v NullableGeoJSONFeature) Get() *GeoJSONFeature {
	return v.value
}

func (v *NullableGeoJSONFeature) Set(val *GeoJSONFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJSONFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJSONFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJSONFeature(val *GeoJSONFeature) *NullableGeoJSONFeature {
	return &NullableGeoJSONFeature{value: val, isSet: true}
}

func (v NullableGeoJSONFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJSONFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


