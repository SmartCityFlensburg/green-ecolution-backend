/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the RouteOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteOptions{}

// RouteOptions Advanced options for routing
type RouteOptions struct {
	// List of features to avoid. 
	AvoidFeatures []string `json:"avoid_features,omitempty"`
	// Specify which type of border crossing to avoid
	AvoidBorders *string `json:"avoid_borders,omitempty"`
	// List of countries to exclude from matrix with `driving-*` profiles. Can be used together with `'avoid_borders': 'controlled'`. `[ 11, 193 ]` would exclude Austria and Switzerland. List of countries and application examples can be found [here](https://giscience.github.io/openrouteservice/technical-details/country-list). Also, ISO standard country codes cna be used in place of the numerical ids, for example, DE or DEU for Germany. 
	AvoidCountries []string `json:"avoid_countries,omitempty"`
	// Definition of the vehicle type.
	VehicleType *string `json:"vehicle_type,omitempty"`
	ProfileParams *ProfileParameters `json:"profile_params,omitempty"`
	AvoidPolygons *RouteOptionsAvoidPolygons `json:"avoid_polygons,omitempty"`
	RoundTrip *RoundTripRouteOptions `json:"round_trip,omitempty"`
}

// NewRouteOptions instantiates a new RouteOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteOptions() *RouteOptions {
	this := RouteOptions{}
	var vehicleType string = "hgv"
	this.VehicleType = &vehicleType
	return &this
}

// NewRouteOptionsWithDefaults instantiates a new RouteOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteOptionsWithDefaults() *RouteOptions {
	this := RouteOptions{}
	var vehicleType string = "hgv"
	this.VehicleType = &vehicleType
	return &this
}

// GetAvoidFeatures returns the AvoidFeatures field value if set, zero value otherwise.
func (o *RouteOptions) GetAvoidFeatures() []string {
	if o == nil || IsNil(o.AvoidFeatures) {
		var ret []string
		return ret
	}
	return o.AvoidFeatures
}

// GetAvoidFeaturesOk returns a tuple with the AvoidFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptions) GetAvoidFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.AvoidFeatures) {
		return nil, false
	}
	return o.AvoidFeatures, true
}

// HasAvoidFeatures returns a boolean if a field has been set.
func (o *RouteOptions) HasAvoidFeatures() bool {
	if o != nil && !IsNil(o.AvoidFeatures) {
		return true
	}

	return false
}

// SetAvoidFeatures gets a reference to the given []string and assigns it to the AvoidFeatures field.
func (o *RouteOptions) SetAvoidFeatures(v []string) {
	o.AvoidFeatures = v
}

// GetAvoidBorders returns the AvoidBorders field value if set, zero value otherwise.
func (o *RouteOptions) GetAvoidBorders() string {
	if o == nil || IsNil(o.AvoidBorders) {
		var ret string
		return ret
	}
	return *o.AvoidBorders
}

// GetAvoidBordersOk returns a tuple with the AvoidBorders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptions) GetAvoidBordersOk() (*string, bool) {
	if o == nil || IsNil(o.AvoidBorders) {
		return nil, false
	}
	return o.AvoidBorders, true
}

// HasAvoidBorders returns a boolean if a field has been set.
func (o *RouteOptions) HasAvoidBorders() bool {
	if o != nil && !IsNil(o.AvoidBorders) {
		return true
	}

	return false
}

// SetAvoidBorders gets a reference to the given string and assigns it to the AvoidBorders field.
func (o *RouteOptions) SetAvoidBorders(v string) {
	o.AvoidBorders = &v
}

// GetAvoidCountries returns the AvoidCountries field value if set, zero value otherwise.
func (o *RouteOptions) GetAvoidCountries() []string {
	if o == nil || IsNil(o.AvoidCountries) {
		var ret []string
		return ret
	}
	return o.AvoidCountries
}

// GetAvoidCountriesOk returns a tuple with the AvoidCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptions) GetAvoidCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.AvoidCountries) {
		return nil, false
	}
	return o.AvoidCountries, true
}

// HasAvoidCountries returns a boolean if a field has been set.
func (o *RouteOptions) HasAvoidCountries() bool {
	if o != nil && !IsNil(o.AvoidCountries) {
		return true
	}

	return false
}

// SetAvoidCountries gets a reference to the given []string and assigns it to the AvoidCountries field.
func (o *RouteOptions) SetAvoidCountries(v []string) {
	o.AvoidCountries = v
}

// GetVehicleType returns the VehicleType field value if set, zero value otherwise.
func (o *RouteOptions) GetVehicleType() string {
	if o == nil || IsNil(o.VehicleType) {
		var ret string
		return ret
	}
	return *o.VehicleType
}

// GetVehicleTypeOk returns a tuple with the VehicleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptions) GetVehicleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleType) {
		return nil, false
	}
	return o.VehicleType, true
}

// HasVehicleType returns a boolean if a field has been set.
func (o *RouteOptions) HasVehicleType() bool {
	if o != nil && !IsNil(o.VehicleType) {
		return true
	}

	return false
}

// SetVehicleType gets a reference to the given string and assigns it to the VehicleType field.
func (o *RouteOptions) SetVehicleType(v string) {
	o.VehicleType = &v
}

// GetProfileParams returns the ProfileParams field value if set, zero value otherwise.
func (o *RouteOptions) GetProfileParams() ProfileParameters {
	if o == nil || IsNil(o.ProfileParams) {
		var ret ProfileParameters
		return ret
	}
	return *o.ProfileParams
}

// GetProfileParamsOk returns a tuple with the ProfileParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptions) GetProfileParamsOk() (*ProfileParameters, bool) {
	if o == nil || IsNil(o.ProfileParams) {
		return nil, false
	}
	return o.ProfileParams, true
}

// HasProfileParams returns a boolean if a field has been set.
func (o *RouteOptions) HasProfileParams() bool {
	if o != nil && !IsNil(o.ProfileParams) {
		return true
	}

	return false
}

// SetProfileParams gets a reference to the given ProfileParameters and assigns it to the ProfileParams field.
func (o *RouteOptions) SetProfileParams(v ProfileParameters) {
	o.ProfileParams = &v
}

// GetAvoidPolygons returns the AvoidPolygons field value if set, zero value otherwise.
func (o *RouteOptions) GetAvoidPolygons() RouteOptionsAvoidPolygons {
	if o == nil || IsNil(o.AvoidPolygons) {
		var ret RouteOptionsAvoidPolygons
		return ret
	}
	return *o.AvoidPolygons
}

// GetAvoidPolygonsOk returns a tuple with the AvoidPolygons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptions) GetAvoidPolygonsOk() (*RouteOptionsAvoidPolygons, bool) {
	if o == nil || IsNil(o.AvoidPolygons) {
		return nil, false
	}
	return o.AvoidPolygons, true
}

// HasAvoidPolygons returns a boolean if a field has been set.
func (o *RouteOptions) HasAvoidPolygons() bool {
	if o != nil && !IsNil(o.AvoidPolygons) {
		return true
	}

	return false
}

// SetAvoidPolygons gets a reference to the given RouteOptionsAvoidPolygons and assigns it to the AvoidPolygons field.
func (o *RouteOptions) SetAvoidPolygons(v RouteOptionsAvoidPolygons) {
	o.AvoidPolygons = &v
}

// GetRoundTrip returns the RoundTrip field value if set, zero value otherwise.
func (o *RouteOptions) GetRoundTrip() RoundTripRouteOptions {
	if o == nil || IsNil(o.RoundTrip) {
		var ret RoundTripRouteOptions
		return ret
	}
	return *o.RoundTrip
}

// GetRoundTripOk returns a tuple with the RoundTrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptions) GetRoundTripOk() (*RoundTripRouteOptions, bool) {
	if o == nil || IsNil(o.RoundTrip) {
		return nil, false
	}
	return o.RoundTrip, true
}

// HasRoundTrip returns a boolean if a field has been set.
func (o *RouteOptions) HasRoundTrip() bool {
	if o != nil && !IsNil(o.RoundTrip) {
		return true
	}

	return false
}

// SetRoundTrip gets a reference to the given RoundTripRouteOptions and assigns it to the RoundTrip field.
func (o *RouteOptions) SetRoundTrip(v RoundTripRouteOptions) {
	o.RoundTrip = &v
}

func (o RouteOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvoidFeatures) {
		toSerialize["avoid_features"] = o.AvoidFeatures
	}
	if !IsNil(o.AvoidBorders) {
		toSerialize["avoid_borders"] = o.AvoidBorders
	}
	if !IsNil(o.AvoidCountries) {
		toSerialize["avoid_countries"] = o.AvoidCountries
	}
	if !IsNil(o.VehicleType) {
		toSerialize["vehicle_type"] = o.VehicleType
	}
	if !IsNil(o.ProfileParams) {
		toSerialize["profile_params"] = o.ProfileParams
	}
	if !IsNil(o.AvoidPolygons) {
		toSerialize["avoid_polygons"] = o.AvoidPolygons
	}
	if !IsNil(o.RoundTrip) {
		toSerialize["round_trip"] = o.RoundTrip
	}
	return toSerialize, nil
}

type NullableRouteOptions struct {
	value *RouteOptions
	isSet bool
}

func (v NullableRouteOptions) Get() *RouteOptions {
	return v.value
}

func (v *NullableRouteOptions) Set(val *RouteOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteOptions(val *RouteOptions) *NullableRouteOptions {
	return &NullableRouteOptions{value: val, isSet: true}
}

func (v NullableRouteOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


