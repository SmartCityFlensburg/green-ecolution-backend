/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the GeoJSONFeatureProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJSONFeatureProperties{}

// GeoJSONFeatureProperties Feature properties
type GeoJSONFeatureProperties struct {
	// \"Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.
	Name *string `json:"name,omitempty"`
	// Distance between the `source/destination` Location and the used point on the routing graph in meters.
	SnappedDistance *float64 `json:"snapped_distance,omitempty"`
	// Index of the requested location
	SourceId *int32 `json:"source_id,omitempty"`
}

// NewGeoJSONFeatureProperties instantiates a new GeoJSONFeatureProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJSONFeatureProperties() *GeoJSONFeatureProperties {
	this := GeoJSONFeatureProperties{}
	return &this
}

// NewGeoJSONFeaturePropertiesWithDefaults instantiates a new GeoJSONFeatureProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJSONFeaturePropertiesWithDefaults() *GeoJSONFeatureProperties {
	this := GeoJSONFeatureProperties{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GeoJSONFeatureProperties) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONFeatureProperties) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GeoJSONFeatureProperties) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GeoJSONFeatureProperties) SetName(v string) {
	o.Name = &v
}

// GetSnappedDistance returns the SnappedDistance field value if set, zero value otherwise.
func (o *GeoJSONFeatureProperties) GetSnappedDistance() float64 {
	if o == nil || IsNil(o.SnappedDistance) {
		var ret float64
		return ret
	}
	return *o.SnappedDistance
}

// GetSnappedDistanceOk returns a tuple with the SnappedDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONFeatureProperties) GetSnappedDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.SnappedDistance) {
		return nil, false
	}
	return o.SnappedDistance, true
}

// HasSnappedDistance returns a boolean if a field has been set.
func (o *GeoJSONFeatureProperties) HasSnappedDistance() bool {
	if o != nil && !IsNil(o.SnappedDistance) {
		return true
	}

	return false
}

// SetSnappedDistance gets a reference to the given float64 and assigns it to the SnappedDistance field.
func (o *GeoJSONFeatureProperties) SetSnappedDistance(v float64) {
	o.SnappedDistance = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *GeoJSONFeatureProperties) GetSourceId() int32 {
	if o == nil || IsNil(o.SourceId) {
		var ret int32
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONFeatureProperties) GetSourceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *GeoJSONFeatureProperties) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given int32 and assigns it to the SourceId field.
func (o *GeoJSONFeatureProperties) SetSourceId(v int32) {
	o.SourceId = &v
}

func (o GeoJSONFeatureProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJSONFeatureProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SnappedDistance) {
		toSerialize["snapped_distance"] = o.SnappedDistance
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	return toSerialize, nil
}

type NullableGeoJSONFeatureProperties struct {
	value *GeoJSONFeatureProperties
	isSet bool
}

func (v NullableGeoJSONFeatureProperties) Get() *GeoJSONFeatureProperties {
	return v.value
}

func (v *NullableGeoJSONFeatureProperties) Set(val *GeoJSONFeatureProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJSONFeatureProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJSONFeatureProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJSONFeatureProperties(val *GeoJSONFeatureProperties) *NullableGeoJSONFeatureProperties {
	return &NullableGeoJSONFeatureProperties{value: val, isSet: true}
}

func (v NullableGeoJSONFeatureProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJSONFeatureProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


