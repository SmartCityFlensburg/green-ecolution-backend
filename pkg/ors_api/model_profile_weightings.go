/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the ProfileWeightings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileWeightings{}

// ProfileWeightings Describe additional weightings to be applied to edges on the routing.
type ProfileWeightings struct {
	// Specifies the fitness level for `cycling-*` profiles.   level: 0 = Novice, 1 = Moderate, 2 = Amateur, 3 = Pro. The prefered gradient increases with level.
	SteepnessDifficulty *int32 `json:"steepness_difficulty,omitempty"`
	// Specifies the Green factor for `foot-*` profiles.  factor: Multiplication factor range from 0 to 1. 0 is the green routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through green areas over a shorter route.
	Green *float32 `json:"green,omitempty"`
	// Specifies the Quiet factor for foot-* profiles.  factor: Multiplication factor range from 0 to 1. 0 is the quiet routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer quiet ways over a shorter route.
	Quiet *float32 `json:"quiet,omitempty"`
	// Specifies the shadow factor for `foot-*` profiles.  factor: Multiplication factor range from 0 to 1. 0 is the shadow routing base factor without multiplying it by the manual factor and is already different from normal routing. 1 will prefer ways through shadow areas over a shorter route.
	Shadow *float32 `json:"shadow,omitempty"`
}

// NewProfileWeightings instantiates a new ProfileWeightings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileWeightings() *ProfileWeightings {
	this := ProfileWeightings{}
	return &this
}

// NewProfileWeightingsWithDefaults instantiates a new ProfileWeightings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileWeightingsWithDefaults() *ProfileWeightings {
	this := ProfileWeightings{}
	return &this
}

// GetSteepnessDifficulty returns the SteepnessDifficulty field value if set, zero value otherwise.
func (o *ProfileWeightings) GetSteepnessDifficulty() int32 {
	if o == nil || IsNil(o.SteepnessDifficulty) {
		var ret int32
		return ret
	}
	return *o.SteepnessDifficulty
}

// GetSteepnessDifficultyOk returns a tuple with the SteepnessDifficulty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileWeightings) GetSteepnessDifficultyOk() (*int32, bool) {
	if o == nil || IsNil(o.SteepnessDifficulty) {
		return nil, false
	}
	return o.SteepnessDifficulty, true
}

// HasSteepnessDifficulty returns a boolean if a field has been set.
func (o *ProfileWeightings) HasSteepnessDifficulty() bool {
	if o != nil && !IsNil(o.SteepnessDifficulty) {
		return true
	}

	return false
}

// SetSteepnessDifficulty gets a reference to the given int32 and assigns it to the SteepnessDifficulty field.
func (o *ProfileWeightings) SetSteepnessDifficulty(v int32) {
	o.SteepnessDifficulty = &v
}

// GetGreen returns the Green field value if set, zero value otherwise.
func (o *ProfileWeightings) GetGreen() float32 {
	if o == nil || IsNil(o.Green) {
		var ret float32
		return ret
	}
	return *o.Green
}

// GetGreenOk returns a tuple with the Green field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileWeightings) GetGreenOk() (*float32, bool) {
	if o == nil || IsNil(o.Green) {
		return nil, false
	}
	return o.Green, true
}

// HasGreen returns a boolean if a field has been set.
func (o *ProfileWeightings) HasGreen() bool {
	if o != nil && !IsNil(o.Green) {
		return true
	}

	return false
}

// SetGreen gets a reference to the given float32 and assigns it to the Green field.
func (o *ProfileWeightings) SetGreen(v float32) {
	o.Green = &v
}

// GetQuiet returns the Quiet field value if set, zero value otherwise.
func (o *ProfileWeightings) GetQuiet() float32 {
	if o == nil || IsNil(o.Quiet) {
		var ret float32
		return ret
	}
	return *o.Quiet
}

// GetQuietOk returns a tuple with the Quiet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileWeightings) GetQuietOk() (*float32, bool) {
	if o == nil || IsNil(o.Quiet) {
		return nil, false
	}
	return o.Quiet, true
}

// HasQuiet returns a boolean if a field has been set.
func (o *ProfileWeightings) HasQuiet() bool {
	if o != nil && !IsNil(o.Quiet) {
		return true
	}

	return false
}

// SetQuiet gets a reference to the given float32 and assigns it to the Quiet field.
func (o *ProfileWeightings) SetQuiet(v float32) {
	o.Quiet = &v
}

// GetShadow returns the Shadow field value if set, zero value otherwise.
func (o *ProfileWeightings) GetShadow() float32 {
	if o == nil || IsNil(o.Shadow) {
		var ret float32
		return ret
	}
	return *o.Shadow
}

// GetShadowOk returns a tuple with the Shadow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileWeightings) GetShadowOk() (*float32, bool) {
	if o == nil || IsNil(o.Shadow) {
		return nil, false
	}
	return o.Shadow, true
}

// HasShadow returns a boolean if a field has been set.
func (o *ProfileWeightings) HasShadow() bool {
	if o != nil && !IsNil(o.Shadow) {
		return true
	}

	return false
}

// SetShadow gets a reference to the given float32 and assigns it to the Shadow field.
func (o *ProfileWeightings) SetShadow(v float32) {
	o.Shadow = &v
}

func (o ProfileWeightings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileWeightings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SteepnessDifficulty) {
		toSerialize["steepness_difficulty"] = o.SteepnessDifficulty
	}
	if !IsNil(o.Green) {
		toSerialize["green"] = o.Green
	}
	if !IsNil(o.Quiet) {
		toSerialize["quiet"] = o.Quiet
	}
	if !IsNil(o.Shadow) {
		toSerialize["shadow"] = o.Shadow
	}
	return toSerialize, nil
}

type NullableProfileWeightings struct {
	value *ProfileWeightings
	isSet bool
}

func (v NullableProfileWeightings) Get() *ProfileWeightings {
	return v.value
}

func (v *NullableProfileWeightings) Set(val *ProfileWeightings) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileWeightings) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileWeightings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileWeightings(val *ProfileWeightings) *NullableProfileWeightings {
	return &NullableProfileWeightings{value: val, isSet: true}
}

func (v NullableProfileWeightings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileWeightings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


