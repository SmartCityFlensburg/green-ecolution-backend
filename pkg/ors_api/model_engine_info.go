/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the EngineInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngineInfo{}

// EngineInfo Information about the openrouteservice engine used
type EngineInfo struct {
	// The backend version of the openrouteservice that was queried
	Version *string `json:"version,omitempty"`
	// The date that the service was last updated
	BuildDate *string `json:"build_date,omitempty"`
	// The date that the graph data was last updated
	GraphDate *string `json:"graph_date,omitempty"`
}

// NewEngineInfo instantiates a new EngineInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngineInfo() *EngineInfo {
	this := EngineInfo{}
	return &this
}

// NewEngineInfoWithDefaults instantiates a new EngineInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineInfoWithDefaults() *EngineInfo {
	this := EngineInfo{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *EngineInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *EngineInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *EngineInfo) SetVersion(v string) {
	o.Version = &v
}

// GetBuildDate returns the BuildDate field value if set, zero value otherwise.
func (o *EngineInfo) GetBuildDate() string {
	if o == nil || IsNil(o.BuildDate) {
		var ret string
		return ret
	}
	return *o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineInfo) GetBuildDateOk() (*string, bool) {
	if o == nil || IsNil(o.BuildDate) {
		return nil, false
	}
	return o.BuildDate, true
}

// HasBuildDate returns a boolean if a field has been set.
func (o *EngineInfo) HasBuildDate() bool {
	if o != nil && !IsNil(o.BuildDate) {
		return true
	}

	return false
}

// SetBuildDate gets a reference to the given string and assigns it to the BuildDate field.
func (o *EngineInfo) SetBuildDate(v string) {
	o.BuildDate = &v
}

// GetGraphDate returns the GraphDate field value if set, zero value otherwise.
func (o *EngineInfo) GetGraphDate() string {
	if o == nil || IsNil(o.GraphDate) {
		var ret string
		return ret
	}
	return *o.GraphDate
}

// GetGraphDateOk returns a tuple with the GraphDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineInfo) GetGraphDateOk() (*string, bool) {
	if o == nil || IsNil(o.GraphDate) {
		return nil, false
	}
	return o.GraphDate, true
}

// HasGraphDate returns a boolean if a field has been set.
func (o *EngineInfo) HasGraphDate() bool {
	if o != nil && !IsNil(o.GraphDate) {
		return true
	}

	return false
}

// SetGraphDate gets a reference to the given string and assigns it to the GraphDate field.
func (o *EngineInfo) SetGraphDate(v string) {
	o.GraphDate = &v
}

func (o EngineInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngineInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.BuildDate) {
		toSerialize["build_date"] = o.BuildDate
	}
	if !IsNil(o.GraphDate) {
		toSerialize["graph_date"] = o.GraphDate
	}
	return toSerialize, nil
}

type NullableEngineInfo struct {
	value *EngineInfo
	isSet bool
}

func (v NullableEngineInfo) Get() *EngineInfo {
	return v.value
}

func (v *NullableEngineInfo) Set(val *EngineInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineInfo(val *EngineInfo) *NullableEngineInfo {
	return &NullableEngineInfo{value: val, isSet: true}
}

func (v NullableEngineInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


