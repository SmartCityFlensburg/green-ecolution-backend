/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the RouteOptionsAvoidPolygons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteOptionsAvoidPolygons{}

// RouteOptionsAvoidPolygons Comprises areas to be avoided for the route. Formatted in GeoJSON as either a Polygon or Multipolygon object.
type RouteOptionsAvoidPolygons struct {
	Empty *bool `json:"empty,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteOptionsAvoidPolygons RouteOptionsAvoidPolygons

// NewRouteOptionsAvoidPolygons instantiates a new RouteOptionsAvoidPolygons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteOptionsAvoidPolygons() *RouteOptionsAvoidPolygons {
	this := RouteOptionsAvoidPolygons{}
	return &this
}

// NewRouteOptionsAvoidPolygonsWithDefaults instantiates a new RouteOptionsAvoidPolygons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteOptionsAvoidPolygonsWithDefaults() *RouteOptionsAvoidPolygons {
	this := RouteOptionsAvoidPolygons{}
	return &this
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *RouteOptionsAvoidPolygons) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteOptionsAvoidPolygons) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *RouteOptionsAvoidPolygons) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *RouteOptionsAvoidPolygons) SetEmpty(v bool) {
	o.Empty = &v
}

func (o RouteOptionsAvoidPolygons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteOptionsAvoidPolygons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteOptionsAvoidPolygons) UnmarshalJSON(data []byte) (err error) {
	varRouteOptionsAvoidPolygons := _RouteOptionsAvoidPolygons{}

	err = json.Unmarshal(data, &varRouteOptionsAvoidPolygons)

	if err != nil {
		return err
	}

	*o = RouteOptionsAvoidPolygons(varRouteOptionsAvoidPolygons)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "empty")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteOptionsAvoidPolygons struct {
	value *RouteOptionsAvoidPolygons
	isSet bool
}

func (v NullableRouteOptionsAvoidPolygons) Get() *RouteOptionsAvoidPolygons {
	return v.value
}

func (v *NullableRouteOptionsAvoidPolygons) Set(val *RouteOptionsAvoidPolygons) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteOptionsAvoidPolygons) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteOptionsAvoidPolygons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteOptionsAvoidPolygons(val *RouteOptionsAvoidPolygons) *NullableRouteOptionsAvoidPolygons {
	return &NullableRouteOptionsAvoidPolygons{value: val, isSet: true}
}

func (v NullableRouteOptionsAvoidPolygons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteOptionsAvoidPolygons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


