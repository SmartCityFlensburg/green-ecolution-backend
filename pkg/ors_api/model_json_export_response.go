/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the JsonExportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonExportResponse{}

// JsonExportResponse The Export Response contains nodes and edge weights from the requested BBox
type JsonExportResponse struct {
	Nodes []JsonNode `json:"nodes,omitempty"`
	Edges []JsonEdge `json:"edges,omitempty"`
	EdgesExtra []JsonEdgeExtra `json:"edges_extra,omitempty"`
	Warning *JSONWarning `json:"warning,omitempty"`
	NodesCount *int64 `json:"nodes_count,omitempty"`
	EdgesCount *int64 `json:"edges_count,omitempty"`
}

// NewJsonExportResponse instantiates a new JsonExportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonExportResponse() *JsonExportResponse {
	this := JsonExportResponse{}
	return &this
}

// NewJsonExportResponseWithDefaults instantiates a new JsonExportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonExportResponseWithDefaults() *JsonExportResponse {
	this := JsonExportResponse{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *JsonExportResponse) GetNodes() []JsonNode {
	if o == nil || IsNil(o.Nodes) {
		var ret []JsonNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonExportResponse) GetNodesOk() ([]JsonNode, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *JsonExportResponse) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []JsonNode and assigns it to the Nodes field.
func (o *JsonExportResponse) SetNodes(v []JsonNode) {
	o.Nodes = v
}

// GetEdges returns the Edges field value if set, zero value otherwise.
func (o *JsonExportResponse) GetEdges() []JsonEdge {
	if o == nil || IsNil(o.Edges) {
		var ret []JsonEdge
		return ret
	}
	return o.Edges
}

// GetEdgesOk returns a tuple with the Edges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonExportResponse) GetEdgesOk() ([]JsonEdge, bool) {
	if o == nil || IsNil(o.Edges) {
		return nil, false
	}
	return o.Edges, true
}

// HasEdges returns a boolean if a field has been set.
func (o *JsonExportResponse) HasEdges() bool {
	if o != nil && !IsNil(o.Edges) {
		return true
	}

	return false
}

// SetEdges gets a reference to the given []JsonEdge and assigns it to the Edges field.
func (o *JsonExportResponse) SetEdges(v []JsonEdge) {
	o.Edges = v
}

// GetEdgesExtra returns the EdgesExtra field value if set, zero value otherwise.
func (o *JsonExportResponse) GetEdgesExtra() []JsonEdgeExtra {
	if o == nil || IsNil(o.EdgesExtra) {
		var ret []JsonEdgeExtra
		return ret
	}
	return o.EdgesExtra
}

// GetEdgesExtraOk returns a tuple with the EdgesExtra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonExportResponse) GetEdgesExtraOk() ([]JsonEdgeExtra, bool) {
	if o == nil || IsNil(o.EdgesExtra) {
		return nil, false
	}
	return o.EdgesExtra, true
}

// HasEdgesExtra returns a boolean if a field has been set.
func (o *JsonExportResponse) HasEdgesExtra() bool {
	if o != nil && !IsNil(o.EdgesExtra) {
		return true
	}

	return false
}

// SetEdgesExtra gets a reference to the given []JsonEdgeExtra and assigns it to the EdgesExtra field.
func (o *JsonExportResponse) SetEdgesExtra(v []JsonEdgeExtra) {
	o.EdgesExtra = v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *JsonExportResponse) GetWarning() JSONWarning {
	if o == nil || IsNil(o.Warning) {
		var ret JSONWarning
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonExportResponse) GetWarningOk() (*JSONWarning, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *JsonExportResponse) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given JSONWarning and assigns it to the Warning field.
func (o *JsonExportResponse) SetWarning(v JSONWarning) {
	o.Warning = &v
}

// GetNodesCount returns the NodesCount field value if set, zero value otherwise.
func (o *JsonExportResponse) GetNodesCount() int64 {
	if o == nil || IsNil(o.NodesCount) {
		var ret int64
		return ret
	}
	return *o.NodesCount
}

// GetNodesCountOk returns a tuple with the NodesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonExportResponse) GetNodesCountOk() (*int64, bool) {
	if o == nil || IsNil(o.NodesCount) {
		return nil, false
	}
	return o.NodesCount, true
}

// HasNodesCount returns a boolean if a field has been set.
func (o *JsonExportResponse) HasNodesCount() bool {
	if o != nil && !IsNil(o.NodesCount) {
		return true
	}

	return false
}

// SetNodesCount gets a reference to the given int64 and assigns it to the NodesCount field.
func (o *JsonExportResponse) SetNodesCount(v int64) {
	o.NodesCount = &v
}

// GetEdgesCount returns the EdgesCount field value if set, zero value otherwise.
func (o *JsonExportResponse) GetEdgesCount() int64 {
	if o == nil || IsNil(o.EdgesCount) {
		var ret int64
		return ret
	}
	return *o.EdgesCount
}

// GetEdgesCountOk returns a tuple with the EdgesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonExportResponse) GetEdgesCountOk() (*int64, bool) {
	if o == nil || IsNil(o.EdgesCount) {
		return nil, false
	}
	return o.EdgesCount, true
}

// HasEdgesCount returns a boolean if a field has been set.
func (o *JsonExportResponse) HasEdgesCount() bool {
	if o != nil && !IsNil(o.EdgesCount) {
		return true
	}

	return false
}

// SetEdgesCount gets a reference to the given int64 and assigns it to the EdgesCount field.
func (o *JsonExportResponse) SetEdgesCount(v int64) {
	o.EdgesCount = &v
}

func (o JsonExportResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonExportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.Edges) {
		toSerialize["edges"] = o.Edges
	}
	if !IsNil(o.EdgesExtra) {
		toSerialize["edges_extra"] = o.EdgesExtra
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	if !IsNil(o.NodesCount) {
		toSerialize["nodes_count"] = o.NodesCount
	}
	if !IsNil(o.EdgesCount) {
		toSerialize["edges_count"] = o.EdgesCount
	}
	return toSerialize, nil
}

type NullableJsonExportResponse struct {
	value *JsonExportResponse
	isSet bool
}

func (v NullableJsonExportResponse) Get() *JsonExportResponse {
	return v.value
}

func (v *NullableJsonExportResponse) Set(val *JsonExportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonExportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonExportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonExportResponse(val *JsonExportResponse) *NullableJsonExportResponse {
	return &NullableJsonExportResponse{value: val, isSet: true}
}

func (v NullableJsonExportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonExportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


