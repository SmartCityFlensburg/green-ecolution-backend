/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the SnappingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnappingResponse{}

// SnappingResponse The Snapping Response contains the snapped coordinates.
type SnappingResponse struct {
	// The snapped locations as coordinates and snapping distance.
	Locations []JSONLocation `json:"locations,omitempty"`
	Metadata *SnappingResponseInfo `json:"metadata,omitempty"`
}

// NewSnappingResponse instantiates a new SnappingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnappingResponse() *SnappingResponse {
	this := SnappingResponse{}
	return &this
}

// NewSnappingResponseWithDefaults instantiates a new SnappingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnappingResponseWithDefaults() *SnappingResponse {
	this := SnappingResponse{}
	return &this
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *SnappingResponse) GetLocations() []JSONLocation {
	if o == nil || IsNil(o.Locations) {
		var ret []JSONLocation
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnappingResponse) GetLocationsOk() ([]JSONLocation, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *SnappingResponse) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []JSONLocation and assigns it to the Locations field.
func (o *SnappingResponse) SetLocations(v []JSONLocation) {
	o.Locations = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SnappingResponse) GetMetadata() SnappingResponseInfo {
	if o == nil || IsNil(o.Metadata) {
		var ret SnappingResponseInfo
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnappingResponse) GetMetadataOk() (*SnappingResponseInfo, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SnappingResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SnappingResponseInfo and assigns it to the Metadata field.
func (o *SnappingResponse) SetMetadata(v SnappingResponseInfo) {
	o.Metadata = &v
}

func (o SnappingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnappingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableSnappingResponse struct {
	value *SnappingResponse
	isSet bool
}

func (v NullableSnappingResponse) Get() *SnappingResponse {
	return v.value
}

func (v *NullableSnappingResponse) Set(val *SnappingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSnappingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSnappingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnappingResponse(val *SnappingResponse) *NullableSnappingResponse {
	return &NullableSnappingResponse{value: val, isSet: true}
}

func (v NullableSnappingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnappingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


