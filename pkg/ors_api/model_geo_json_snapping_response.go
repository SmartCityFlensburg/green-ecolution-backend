/*
Openrouteservice

This is the openrouteservice API documentation for ORS Core-Version 9.0.0. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor-next.swagger.io/).

API version: v2
Contact: support@smartmobility.heigit.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ors

import (
	"encoding/json"
)

// checks if the GeoJSONSnappingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJSONSnappingResponse{}

// GeoJSONSnappingResponse The GeoJSON Snapping Response contains the snapped coordinates in GeoJSON format.
type GeoJSONSnappingResponse struct {
	// GeoJSON type
	Type *string `json:"type,omitempty"`
	// Information about the service and request
	Features []GeoJSONFeature `json:"features,omitempty"`
	Metadata *SnappingResponseInfo `json:"metadata,omitempty"`
	// Bounding box that covers all returned snapping points
	Bbox []float64 `json:"bbox,omitempty"`
}

// NewGeoJSONSnappingResponse instantiates a new GeoJSONSnappingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJSONSnappingResponse() *GeoJSONSnappingResponse {
	this := GeoJSONSnappingResponse{}
	var type_ string = "FeatureCollection"
	this.Type = &type_
	return &this
}

// NewGeoJSONSnappingResponseWithDefaults instantiates a new GeoJSONSnappingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJSONSnappingResponseWithDefaults() *GeoJSONSnappingResponse {
	this := GeoJSONSnappingResponse{}
	var type_ string = "FeatureCollection"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GeoJSONSnappingResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONSnappingResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GeoJSONSnappingResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GeoJSONSnappingResponse) SetType(v string) {
	o.Type = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *GeoJSONSnappingResponse) GetFeatures() []GeoJSONFeature {
	if o == nil || IsNil(o.Features) {
		var ret []GeoJSONFeature
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONSnappingResponse) GetFeaturesOk() ([]GeoJSONFeature, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *GeoJSONSnappingResponse) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []GeoJSONFeature and assigns it to the Features field.
func (o *GeoJSONSnappingResponse) SetFeatures(v []GeoJSONFeature) {
	o.Features = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GeoJSONSnappingResponse) GetMetadata() SnappingResponseInfo {
	if o == nil || IsNil(o.Metadata) {
		var ret SnappingResponseInfo
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONSnappingResponse) GetMetadataOk() (*SnappingResponseInfo, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GeoJSONSnappingResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SnappingResponseInfo and assigns it to the Metadata field.
func (o *GeoJSONSnappingResponse) SetMetadata(v SnappingResponseInfo) {
	o.Metadata = &v
}

// GetBbox returns the Bbox field value if set, zero value otherwise.
func (o *GeoJSONSnappingResponse) GetBbox() []float64 {
	if o == nil || IsNil(o.Bbox) {
		var ret []float64
		return ret
	}
	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONSnappingResponse) GetBboxOk() ([]float64, bool) {
	if o == nil || IsNil(o.Bbox) {
		return nil, false
	}
	return o.Bbox, true
}

// HasBbox returns a boolean if a field has been set.
func (o *GeoJSONSnappingResponse) HasBbox() bool {
	if o != nil && !IsNil(o.Bbox) {
		return true
	}

	return false
}

// SetBbox gets a reference to the given []float64 and assigns it to the Bbox field.
func (o *GeoJSONSnappingResponse) SetBbox(v []float64) {
	o.Bbox = v
}

func (o GeoJSONSnappingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJSONSnappingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Bbox) {
		toSerialize["bbox"] = o.Bbox
	}
	return toSerialize, nil
}

type NullableGeoJSONSnappingResponse struct {
	value *GeoJSONSnappingResponse
	isSet bool
}

func (v NullableGeoJSONSnappingResponse) Get() *GeoJSONSnappingResponse {
	return v.value
}

func (v *NullableGeoJSONSnappingResponse) Set(val *GeoJSONSnappingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJSONSnappingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJSONSnappingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJSONSnappingResponse(val *GeoJSONSnappingResponse) *NullableGeoJSONSnappingResponse {
	return &NullableGeoJSONSnappingResponse{value: val, isSet: true}
}

func (v NullableGeoJSONSnappingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJSONSnappingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


