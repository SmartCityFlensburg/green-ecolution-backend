-- +goose Up
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE IF NOT EXISTS images (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  url TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  username TEXT NOT NULL,
  password TEXT NOT NULL,
  active BOOLEAN NOT NULL DEFAULT FALSE,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  employee_id TEXT NOT NULL,
  phone_number TEXT NOT NULL,
  email TEXT NOT NULL,
  image_id INT,
  FOREIGN KEY (image_id) REFERENCES images(id)
);

CREATE TABLE IF NOT EXISTS roles (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name TEXT NOT NULL,
  can_edit_trees BOOLEAN NOT NULL DEFAULT FALSE,
  can_view_trees BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS users_roles (
  user_id INT,
  role_id INT,
  PRIMARY KEY (user_id, role_id),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (role_id) REFERENCES roles(id)
);

CREATE TYPE route_status AS ENUM ('active', 'inactive', 'deleted', 'archived', 'draft', 'finished');

CREATE TABLE IF NOT EXISTS routes (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  watering_plan_id INT,
  vehicle_id INT,
  status route_status NOT NULL DEFAULT 'draft',
  automatic BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (watering_plan_id) REFERENCES watering_plans(id),
  FOREIGN KEY (vehicle_id) REFERENCES vehicles(id)
);

CREATE TABLE IF NOT EXISTS routes_users (
  user_id INT,
  route_id INT,
  PRIMARY KEY (user_id, route_id),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (route_id) REFERENCES routes(id)
);

CREATE TABLE IF NOT EXISTS vehicles (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  number_plate TEXT NOT NULL,
  description TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS routes_vehicles (
  route_id INT,
  vehicle_id INT,
  PRIMARY KEY (route_id, vehicle_id),
  FOREIGN KEY (route_id) REFERENCES routes(id),
  FOREIGN KEY (vehicle_id) REFERENCES vehicles(id)
);

CREATE TABLE IF NOT EXISTS watering_plans (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  start_date TIMESTAMP NOT NULL,
  end_date TIMESTAMP,
  route_length_km FLOAT NOT NULL,
  water_required_litres FLOAT NOT NULL,
  water_consumed_litres FLOAT NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS watering_plans_routes (
  watering_plan_id INT,
  route_id INT,
  PRIMARY KEY (watering_plan_id, route_id),
  FOREIGN KEY (watering_plan_id) REFERENCES watering_plans(id),
  FOREIGN KEY (route_id) REFERENCES routes(id)
);

CREATE TYPE tree_cluster_watering_status AS ENUM ('good', 'moderate', 'bad', 'unknown');

CREATE TABLE IF NOT EXISTS tree_clusters (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  watering_status tree_cluster_watering_status NOT NULL DEFAULT 'unknown',
  last_watered TIMESTAMP,
  -- last_watered_by_user_id INT,
  current_moisture_level FLOAT NOT NULL,
  region TEXT NOT NULL,
  address TEXT NOT NULL,
  description TEXT NOT NULL,
  archived BOOLEAN NOT NULL DEFAULT FALSE,
  latitude FLOAT NOT NULL,
  longitude FLOAT NOT NULL,
  geometry GEOMETRY(Point, 4326) NOT NULL
);

CREATE TABLE IF NOT EXISTS watering_plans_tree_clusters (
  watering_plan_id INT,
  tree_cluster_id INT,
  PRIMARY KEY (watering_plan_id, tree_cluster_id),
  FOREIGN KEY (watering_plan_id) REFERENCES watering_plans(id),
  FOREIGN KEY (tree_cluster_id) REFERENCES tree_clusters(id)
);

CREATE TYPE sensor_status AS ENUM ('online', 'offline', 'unknown');

CREATE TABLE IF NOT EXISTS sensors (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  first_used TIMESTAMP NOT NULL,
  status sensor_status NOT NULL DEFAULT 'unknown'
);

CREATE TABLE IF NOT EXISTS sensor_mesurements (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  data JSONB NOT NULL,
  sensor_id INT NOT NULL,
  FOREIGN KEY (sensor_id) REFERENCES sensors(id)
);

CREATE TYPE tree_soil_condition AS ENUM ('schluffig');

CREATE TABLE IF NOT EXISTS trees (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  tree_cluster_id INT,
  sensor_id INT,
  age INT NOT NULL,
  height_above_sea_level FLOAT NOT NULL,
  planting_year INT NOT NULL,
  species TEXT NOT NULL,
  soil_condition tree_soil_condition NOT NULL DEFAULT 'schluffig',
  tree_number INT NOT NULL,
  additional_info TEXT NOT NULL DEFAULT '',
  latitude FLOAT NOT NULL,
  longitude FLOAT NOT NULL,
  geometry GEOMETRY(Point, 4326) NOT NULL,
  FOREIGN KEY (sensor_id) REFERENCES sensors(id),
  FOREIGN KEY (tree_cluster_id) REFERENCES tree_clusters(id)
);

CREATE TABLE IF NOT EXISTS trees_images (
  tree_id INT,
  image_id INT,
  PRIMARY KEY (tree_id, image_id),
  FOREIGN KEY (tree_id) REFERENCES trees(id),
  FOREIGN KEY (image_id) REFERENCES images(id)
);

CREATE TABLE IF NOT EXISTS planting_areas (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  sensor_id INT,
  size FLOAT NOT NULL,
  description TEXT NOT NULL,
  number_of_plants INT NOT NULL DEFAULT 0,
  current_moisture_level FLOAT NOT NULL,
  additional_info TEXT NOT NULL DEFAULT '',
  region TEXT NOT NULL,
  address TEXT NOT NULL,
  latitude FLOAT NOT NULL,
  longitude FLOAT NOT NULL,
  geometry GEOMETRY(Polygon, 4326) NOT NULL
);

CREATE TABLE IF NOT EXISTS planting_areas_images (
  planting_area_id INT,
  image_id INT,
  PRIMARY KEY (planting_area_id, image_id),
  FOREIGN KEY (planting_area_id) REFERENCES planting_areas(id),
  FOREIGN KEY (image_id) REFERENCES images(id)
);

-- +goose StatementBegin
CREATE OR REPLACE FUNCTION update_updated_at_column()
  RETURNS TRIGGER
  AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$
language 'plpgsql';
-- +goose StatementEnd

CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_images_updated_at
BEFORE UPDATE ON images
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_roles_updated_at
BEFORE UPDATE ON roles
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_routes_updated_at
BEFORE UPDATE ON routes
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_vehicles_updated_at
BEFORE UPDATE ON vehicles
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_watering_plans_updated_at
BEFORE UPDATE ON watering_plans
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tree_clusters_updated_at
BEFORE UPDATE ON tree_clusters
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sensors_updated_at
BEFORE UPDATE ON sensors
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sensor_mesurements_updated_at
BEFORE UPDATE ON sensor_mesurements
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_trees_updated_at
BEFORE UPDATE ON trees
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_planting_areas_updated_at
BEFORE UPDATE ON planting_areas
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- +goose Down
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
DROP TRIGGER IF EXISTS update_images_updated_at ON images;
DROP TRIGGER IF EXISTS update_roles_updated_at ON roles;
DROP TRIGGER IF EXISTS update_routes_updated_at ON routes;
DROP TRIGGER IF EXISTS update_vehicles_updated_at ON vehicles;
DROP TRIGGER IF EXISTS update_watering_plans_updated_at ON watering_plans;
DROP TRIGGER IF EXISTS update_tree_clusters_updated_at ON tree_clusters;
DROP TRIGGER IF EXISTS update_sensors_updated_at ON sensors;
DROP TRIGGER IF EXISTS update_sensor_mesurements_updated_at ON sensor_mesurements;
DROP TRIGGER IF EXISTS update_trees_updated_at ON trees;
DROP TRIGGER IF EXISTS update_planting_areas_updated_at ON planting_areas;
DROP FUNCTION IF EXISTS update_updated_at_column();

DROP TABLE IF EXISTS users_roles;
DROP TABLE IF EXISTS routes_users;
DROP TABLE IF EXISTS routes_vehicles;
DROP TABLE IF EXISTS watering_plans_routes;
DROP TABLE IF EXISTS watering_plans_tree_clusters;
DROP TABLE IF EXISTS trees_images;
DROP TABLE IF EXISTS planting_areas_images;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS roles;
DROP TABLE IF EXISTS routes;
DROP TABLE IF EXISTS vehicles;
DROP TABLE IF EXISTS watering_plans;
DROP TABLE IF EXISTS tree_clusters;
DROP TABLE IF EXISTS trees; 
DROP TABLE IF EXISTS planting_areas;
DROP TABLE IF EXISTS sensor_mesurements;
DROP TABLE IF EXISTS sensors;
DROP TABLE IF EXISTS images;

DROP TYPE IF EXISTS route_status;
DROP TYPE IF EXISTS tree_cluster_watering_status;
DROP TYPE IF EXISTS sensor_status;
DROP TYPE IF EXISTS tree_soil_condition;

